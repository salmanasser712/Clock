
clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000020ae  00002142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800072  00800072  00002154  2**0
                  ALLOC
  3 .stab         00001f68  00000000  00000000  00002154  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d3a  00000000  00000000  000040bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004f36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000050a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006cef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007bda  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008988  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009543  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <main>
      8a:	0c 94 55 10 	jmp	0x20aa	; 0x20aa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1e 10 	jmp	0x203c	; 0x203c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3a 10 	jmp	0x2074	; 0x2074 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 46 10 	jmp	0x208c	; 0x208c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 46 10 	jmp	0x208c	; 0x208c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1e 10 	jmp	0x203c	; 0x203c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3a 10 	jmp	0x2074	; 0x2074 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 46 10 	jmp	0x208c	; 0x208c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 46 10 	jmp	0x208c	; 0x208c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2a 10 	jmp	0x2054	; 0x2054 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 46 10 	jmp	0x208c	; 0x208c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2e 10 	jmp	0x205c	; 0x205c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TMR_Init>:
extern uint8 delay_flag;
extern uint8 blincking;
extern uint8 first;

void TMR_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
     b4e:	e3 e5       	ldi	r30, 0x53	; 83
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	10 82       	st	Z, r1
	TIFR = 0;
     b54:	e8 e5       	ldi	r30, 0x58	; 88
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	10 82       	st	Z, r1
	TIMSK = 0;
     b5a:	e9 e5       	ldi	r30, 0x59	; 89
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	10 82       	st	Z, r1
	/* Add your code here! */
	//SET MODE
#if Timer_MODE == Normal
	clear(TCCR0, WGM01);
     b60:	a3 e5       	ldi	r26, 0x53	; 83
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e3 e5       	ldi	r30, 0x53	; 83
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	87 7f       	andi	r24, 0xF7	; 247
     b6c:	8c 93       	st	X, r24
	clear(TCCR0, WGM00);
     b6e:	a3 e5       	ldi	r26, 0x53	; 83
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	e3 e5       	ldi	r30, 0x53	; 83
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	8f 7b       	andi	r24, 0xBF	; 191
     b7a:	8c 93       	st	X, r24
	set(TCCR0, FOC0);
     b7c:	a3 e5       	ldi	r26, 0x53	; 83
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	e3 e5       	ldi	r30, 0x53	; 83
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	80 68       	ori	r24, 0x80	; 128
     b88:	8c 93       	st	X, r24
	set(TCCR0, WGM01);
	set(TCCR0, WGM00);
#endif

	//TMR_CLEAR_OVFLAG
	set( TIMSK, TOIE0);
     b8a:	a9 e5       	ldi	r26, 0x59	; 89
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	e9 e5       	ldi	r30, 0x59	; 89
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	81 60       	ori	r24, 0x01	; 1
     b96:	8c 93       	st	X, r24
	/* End of your code!*/
}
     b98:	cf 91       	pop	r28
     b9a:	df 91       	pop	r29
     b9c:	08 95       	ret

00000b9e <TMR_Start>:
void TMR_Start(void)
{
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
	/* Add your code here! */
	//TMR_CLEAR_OVFLAG
	set(TIFR, TOV0);
     ba6:	a8 e5       	ldi	r26, 0x58	; 88
     ba8:	b0 e0       	ldi	r27, 0x00	; 0
     baa:	e8 e5       	ldi	r30, 0x58	; 88
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	80 81       	ld	r24, Z
     bb0:	81 60       	ori	r24, 0x01	; 1
     bb2:	8c 93       	st	X, r24
	//TIMER_TICK_adjust
	TCNT0 = TCNT0_value;
     bb4:	e2 e5       	ldi	r30, 0x52	; 82
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 91 7a 00 	lds	r24, 0x007A
     bbc:	80 83       	st	Z, r24
	//TMR_ENABLE_CLOCK
	#if SET_PRESCALER == 1024
		set(TCCR0, CS02);
     bbe:	a3 e5       	ldi	r26, 0x53	; 83
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e3 e5       	ldi	r30, 0x53	; 83
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	84 60       	ori	r24, 0x04	; 4
     bca:	8c 93       	st	X, r24
		clear(TCCR0, CS01);
     bcc:	a3 e5       	ldi	r26, 0x53	; 83
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e3 e5       	ldi	r30, 0x53	; 83
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8d 7f       	andi	r24, 0xFD	; 253
     bd8:	8c 93       	st	X, r24
		set(TCCR0, CS00);
     bda:	a3 e5       	ldi	r26, 0x53	; 83
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e3 e5       	ldi	r30, 0x53	; 83
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	81 60       	ori	r24, 0x01	; 1
     be6:	8c 93       	st	X, r24
	#endif

	/* End of your code!*/
}
     be8:	cf 91       	pop	r28
     bea:	df 91       	pop	r29
     bec:	08 95       	ret

00000bee <TMR_CheckOverFlow>:

uint8 TMR_CheckOverFlow(void)
{
     bee:	df 93       	push	r29
     bf0:	cf 93       	push	r28
     bf2:	0f 92       	push	r0
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
	/* Add your code here! */
	// TMR_GET_OVFLAG
	uint8 ov = getbit( TIFR, TOV0);
     bf8:	e8 e5       	ldi	r30, 0x58	; 88
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	81 70       	andi	r24, 0x01	; 1
     c00:	89 83       	std	Y+1, r24	; 0x01
	return ov;
     c02:	89 81       	ldd	r24, Y+1	; 0x01
	/* End of your code!*/
}
     c04:	0f 90       	pop	r0
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <TMR_Stop>:
void TMR_Stop(void)
{
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
	/* Add your code here! */
	//TMR_DISABLE_CLOCK
	clear( TCCR0, CS02);
     c14:	a3 e5       	ldi	r26, 0x53	; 83
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e3 e5       	ldi	r30, 0x53	; 83
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	8b 7f       	andi	r24, 0xFB	; 251
     c20:	8c 93       	st	X, r24
	clear( TCCR0, CS01);
     c22:	a3 e5       	ldi	r26, 0x53	; 83
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	e3 e5       	ldi	r30, 0x53	; 83
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	8d 7f       	andi	r24, 0xFD	; 253
     c2e:	8c 93       	st	X, r24
	clear( TCCR0, CS00);
     c30:	a3 e5       	ldi	r26, 0x53	; 83
     c32:	b0 e0       	ldi	r27, 0x00	; 0
     c34:	e3 e5       	ldi	r30, 0x53	; 83
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	8e 7f       	andi	r24, 0xFE	; 254
     c3c:	8c 93       	st	X, r24
	/* End of your code!*/
}
     c3e:	cf 91       	pop	r28
     c40:	df 91       	pop	r29
     c42:	08 95       	ret

00000c44 <delay_int>:


void delay_int(tWord time_ms){
     c44:	df 93       	push	r29
     c46:	cf 93       	push	r28
     c48:	00 d0       	rcall	.+0      	; 0xc4a <delay_int+0x6>
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	9a 83       	std	Y+2, r25	; 0x02
     c50:	89 83       	std	Y+1, r24	; 0x01
	TMR_Init();
     c52:	0e 94 a3 05 	call	0xb46	; 0xb46 <TMR_Init>
	TMR_Stop();
     c56:	0e 94 06 06 	call	0xc0c	; 0xc0c <TMR_Stop>
	count = 0;
     c5a:	10 92 76 00 	sts	0x0076, r1
     c5e:	10 92 77 00 	sts	0x0077, r1
     c62:	10 92 78 00 	sts	0x0078, r1
     c66:	10 92 79 00 	sts	0x0079, r1
	target = (time_ms / TMR_TICK_MS);
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
     c6c:	9a 81       	ldd	r25, Y+2	; 0x02
     c6e:	2a e0       	ldi	r18, 0x0A	; 10
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	b9 01       	movw	r22, r18
     c74:	0e 94 0a 10 	call	0x2014	; 0x2014 <__udivmodhi4>
     c78:	cb 01       	movw	r24, r22
     c7a:	cc 01       	movw	r24, r24
     c7c:	a0 e0       	ldi	r26, 0x00	; 0
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	80 93 72 00 	sts	0x0072, r24
     c84:	90 93 73 00 	sts	0x0073, r25
     c88:	a0 93 74 00 	sts	0x0074, r26
     c8c:	b0 93 75 00 	sts	0x0075, r27
	TMR_Start();
     c90:	0e 94 cf 05 	call	0xb9e	; 0xb9e <TMR_Start>
}
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	08 95       	ret

00000c9e <__vector_11>:
void __vector_11(void){
     c9e:	1f 92       	push	r1
     ca0:	0f 92       	push	r0
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	0f 92       	push	r0
     ca6:	11 24       	eor	r1, r1
     ca8:	2f 93       	push	r18
     caa:	3f 93       	push	r19
     cac:	4f 93       	push	r20
     cae:	5f 93       	push	r21
     cb0:	6f 93       	push	r22
     cb2:	7f 93       	push	r23
     cb4:	8f 93       	push	r24
     cb6:	9f 93       	push	r25
     cb8:	af 93       	push	r26
     cba:	bf 93       	push	r27
     cbc:	ef 93       	push	r30
     cbe:	ff 93       	push	r31
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
	count++;
     cc8:	80 91 76 00 	lds	r24, 0x0076
     ccc:	90 91 77 00 	lds	r25, 0x0077
     cd0:	a0 91 78 00 	lds	r26, 0x0078
     cd4:	b0 91 79 00 	lds	r27, 0x0079
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	a1 1d       	adc	r26, r1
     cdc:	b1 1d       	adc	r27, r1
     cde:	80 93 76 00 	sts	0x0076, r24
     ce2:	90 93 77 00 	sts	0x0077, r25
     ce6:	a0 93 78 00 	sts	0x0078, r26
     cea:	b0 93 79 00 	sts	0x0079, r27
	if(count < target) {
     cee:	20 91 76 00 	lds	r18, 0x0076
     cf2:	30 91 77 00 	lds	r19, 0x0077
     cf6:	40 91 78 00 	lds	r20, 0x0078
     cfa:	50 91 79 00 	lds	r21, 0x0079
     cfe:	80 91 72 00 	lds	r24, 0x0072
     d02:	90 91 73 00 	lds	r25, 0x0073
     d06:	a0 91 74 00 	lds	r26, 0x0074
     d0a:	b0 91 75 00 	lds	r27, 0x0075
     d0e:	28 17       	cp	r18, r24
     d10:	39 07       	cpc	r19, r25
     d12:	4a 07       	cpc	r20, r26
     d14:	5b 07       	cpc	r21, r27
     d16:	18 f4       	brcc	.+6      	; 0xd1e <__vector_11+0x80>
		TMR_Start();
     d18:	0e 94 cf 05 	call	0xb9e	; 0xb9e <TMR_Start>
     d1c:	05 c0       	rjmp	.+10     	; 0xd28 <__vector_11+0x8a>
		return;
	}
	else {
		TMR_Stop();
     d1e:	0e 94 06 06 	call	0xc0c	; 0xc0c <TMR_Stop>
		delay_flag = 1;
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	80 93 6f 00 	sts	0x006F, r24
		return;
	}
}
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	ff 91       	pop	r31
     d2e:	ef 91       	pop	r30
     d30:	bf 91       	pop	r27
     d32:	af 91       	pop	r26
     d34:	9f 91       	pop	r25
     d36:	8f 91       	pop	r24
     d38:	7f 91       	pop	r23
     d3a:	6f 91       	pop	r22
     d3c:	5f 91       	pop	r21
     d3e:	4f 91       	pop	r20
     d40:	3f 91       	pop	r19
     d42:	2f 91       	pop	r18
     d44:	0f 90       	pop	r0
     d46:	0f be       	out	0x3f, r0	; 63
     d48:	0f 90       	pop	r0
     d4a:	1f 90       	pop	r1
     d4c:	18 95       	reti

00000d4e <Start_clock>:


// counting minutes
void Start_clock(){
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
	if(delay_flag && !blincking){
     d56:	80 91 6f 00 	lds	r24, 0x006F
     d5a:	88 23       	and	r24, r24
     d5c:	b9 f0       	breq	.+46     	; 0xd8c <Start_clock+0x3e>
     d5e:	80 91 83 00 	lds	r24, 0x0083
     d62:	88 23       	and	r24, r24
     d64:	99 f4       	brne	.+38     	; 0xd8c <Start_clock+0x3e>
		delay_int((tWord)Delay_min);
     d66:	80 91 68 00 	lds	r24, 0x0068
     d6a:	90 91 69 00 	lds	r25, 0x0069
     d6e:	0e 94 22 06 	call	0xc44	; 0xc44 <delay_int>
		delay_flag = 0;
     d72:	10 92 6f 00 	sts	0x006F, r1
		if(!first) inc_clock();
     d76:	80 91 70 00 	lds	r24, 0x0070
     d7a:	88 23       	and	r24, r24
     d7c:	29 f4       	brne	.+10     	; 0xd88 <Start_clock+0x3a>
     d7e:	e0 91 7b 00 	lds	r30, 0x007B
     d82:	f0 91 7c 00 	lds	r31, 0x007C
     d86:	09 95       	icall
		first = 0;
     d88:	10 92 70 00 	sts	0x0070, r1
	}
}
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	08 95       	ret

00000d92 <Plincking_delay>:

// delaying for the blincking
void Plincking_delay(){
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
	if(blincking && delay_flag){
     d9a:	80 91 83 00 	lds	r24, 0x0083
     d9e:	88 23       	and	r24, r24
     da0:	61 f0       	breq	.+24     	; 0xdba <Plincking_delay+0x28>
     da2:	80 91 6f 00 	lds	r24, 0x006F
     da6:	88 23       	and	r24, r24
     da8:	41 f0       	breq	.+16     	; 0xdba <Plincking_delay+0x28>
		delay_int(Plinck_ms);
     daa:	80 91 6a 00 	lds	r24, 0x006A
     dae:	88 2f       	mov	r24, r24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 22 06 	call	0xc44	; 0xc44 <delay_int>
		delay_flag = 0;
     db6:	10 92 6f 00 	sts	0x006F, r1
	}
}
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <Timer_callback>:

void Timer_callback(void(*ptr)(void)){
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <Timer_callback+0x6>
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	9a 83       	std	Y+2, r25	; 0x02
     dcc:	89 83       	std	Y+1, r24	; 0x01
	inc_clock = ptr;
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	9a 81       	ldd	r25, Y+2	; 0x02
     dd2:	90 93 7c 00 	sts	0x007C, r25
     dd6:	80 93 7b 00 	sts	0x007B, r24
}
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	cf 91       	pop	r28
     de0:	df 91       	pop	r29
     de2:	08 95       	ret

00000de4 <GIE_voidEnable>:

#include "GIE_interface.h"
#include "GIE_private.h"
//#include "GIE_config.h"

void GIE_voidEnable(void){
     de4:	df 93       	push	r29
     de6:	cf 93       	push	r28
     de8:	cd b7       	in	r28, 0x3d	; 61
     dea:	de b7       	in	r29, 0x3e	; 62
	set(SREG, 7);
     dec:	af e5       	ldi	r26, 0x5F	; 95
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	ef e5       	ldi	r30, 0x5F	; 95
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	80 68       	ori	r24, 0x80	; 128
     df8:	8c 93       	st	X, r24
}
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <GIE_voidDisable>:

void GIE_voidDisable(void){
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
	clear(SREG, 7);
     e08:	af e5       	ldi	r26, 0x5F	; 95
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	ef e5       	ldi	r30, 0x5F	; 95
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	8f 77       	andi	r24, 0x7F	; 127
     e14:	8c 93       	st	X, r24
}
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <INIT>:
#include "DIO_private.h"
#include "DIO_INT.h"


void INIT(void)
{
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
	DDRA = PORT_INPUT;
     e24:	ea e3       	ldi	r30, 0x3A	; 58
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	10 82       	st	Z, r1
	DDRB = PORT_INPUT;
     e2a:	e7 e3       	ldi	r30, 0x37	; 55
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	10 82       	st	Z, r1
	DDRC = PORT_INPUT;
     e30:	e4 e3       	ldi	r30, 0x34	; 52
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	10 82       	st	Z, r1
	DDRD = PORT_INPUT;
     e36:	e1 e3       	ldi	r30, 0x31	; 49
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	10 82       	st	Z, r1
}
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <SETPINDIrection>:

ERROR_status SETPINDIrection(uint8 PORT, uint8 PIN, uint8 STATE)
{ 
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	2e 97       	sbiw	r28, 0x0e	; 14
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	8a 83       	std	Y+2, r24	; 0x02
     e58:	6b 83       	std	Y+3, r22	; 0x03
     e5a:	4c 83       	std	Y+4, r20	; 0x04
	ERROR_status loc_variable = E_OK;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	89 83       	std	Y+1, r24	; 0x01
	if(PORT>=PORTA && PORT <=PORTD)
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	88 23       	and	r24, r24
     e64:	09 f4       	brne	.+2      	; 0xe68 <SETPINDIrection+0x26>
     e66:	0d c1       	rjmp	.+538    	; 0x1082 <SETPINDIrection+0x240>
     e68:	8a 81       	ldd	r24, Y+2	; 0x02
     e6a:	85 30       	cpi	r24, 0x05	; 5
     e6c:	08 f0       	brcs	.+2      	; 0xe70 <SETPINDIrection+0x2e>
     e6e:	09 c1       	rjmp	.+530    	; 0x1082 <SETPINDIrection+0x240>
	{
		switch(PORT){
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	3e 87       	std	Y+14, r19	; 0x0e
     e78:	2d 87       	std	Y+13, r18	; 0x0d
     e7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e7e:	82 30       	cpi	r24, 0x02	; 2
     e80:	91 05       	cpc	r25, r1
     e82:	09 f4       	brne	.+2      	; 0xe86 <SETPINDIrection+0x44>
     e84:	51 c0       	rjmp	.+162    	; 0xf28 <SETPINDIrection+0xe6>
     e86:	2d 85       	ldd	r18, Y+13	; 0x0d
     e88:	3e 85       	ldd	r19, Y+14	; 0x0e
     e8a:	23 30       	cpi	r18, 0x03	; 3
     e8c:	31 05       	cpc	r19, r1
     e8e:	34 f4       	brge	.+12     	; 0xe9c <SETPINDIrection+0x5a>
     e90:	8d 85       	ldd	r24, Y+13	; 0x0d
     e92:	9e 85       	ldd	r25, Y+14	; 0x0e
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	91 05       	cpc	r25, r1
     e98:	71 f0       	breq	.+28     	; 0xeb6 <SETPINDIrection+0x74>
     e9a:	f1 c0       	rjmp	.+482    	; 0x107e <SETPINDIrection+0x23c>
     e9c:	2d 85       	ldd	r18, Y+13	; 0x0d
     e9e:	3e 85       	ldd	r19, Y+14	; 0x0e
     ea0:	23 30       	cpi	r18, 0x03	; 3
     ea2:	31 05       	cpc	r19, r1
     ea4:	09 f4       	brne	.+2      	; 0xea8 <SETPINDIrection+0x66>
     ea6:	79 c0       	rjmp	.+242    	; 0xf9a <SETPINDIrection+0x158>
     ea8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eaa:	9e 85       	ldd	r25, Y+14	; 0x0e
     eac:	84 30       	cpi	r24, 0x04	; 4
     eae:	91 05       	cpc	r25, r1
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <SETPINDIrection+0x72>
     eb2:	ac c0       	rjmp	.+344    	; 0x100c <SETPINDIrection+0x1ca>
     eb4:	e4 c0       	rjmp	.+456    	; 0x107e <SETPINDIrection+0x23c>
		
				case PORTA:
							switch(STATE)
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	3c 87       	std	Y+12, r19	; 0x0c
     ebe:	2b 87       	std	Y+11, r18	; 0x0b
     ec0:	8b 85       	ldd	r24, Y+11	; 0x0b
     ec2:	9c 85       	ldd	r25, Y+12	; 0x0c
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	c9 f0       	breq	.+50     	; 0xefa <SETPINDIrection+0xb8>
     ec8:	2b 85       	ldd	r18, Y+11	; 0x0b
     eca:	3c 85       	ldd	r19, Y+12	; 0x0c
     ecc:	21 30       	cpi	r18, 0x01	; 1
     ece:	31 05       	cpc	r19, r1
     ed0:	49 f5       	brne	.+82     	; 0xf24 <SETPINDIrection+0xe2>
							{
								case PIN_OUTPUT:
									set(DDRA,PIN);
     ed2:	aa e3       	ldi	r26, 0x3A	; 58
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ea e3       	ldi	r30, 0x3A	; 58
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 2e       	mov	r0, r18
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <SETPINDIrection+0xae>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	0a 94       	dec	r0
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <SETPINDIrection+0xaa>
     ef4:	84 2b       	or	r24, r20
     ef6:	8c 93       	st	X, r24
     ef8:	c5 c0       	rjmp	.+394    	; 0x1084 <SETPINDIrection+0x242>
									break;
								case PIN_INPUT:
									clear(DDRA,PIN);
     efa:	aa e3       	ldi	r26, 0x3A	; 58
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	ea e3       	ldi	r30, 0x3A	; 58
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	48 2f       	mov	r20, r24
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 2e       	mov	r0, r18
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <SETPINDIrection+0xd6>
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	0a 94       	dec	r0
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <SETPINDIrection+0xd2>
     f1c:	80 95       	com	r24
     f1e:	84 23       	and	r24, r20
     f20:	8c 93       	st	X, r24
     f22:	b0 c0       	rjmp	.+352    	; 0x1084 <SETPINDIrection+0x242>
									break;
								default: loc_variable = E_NOK;
     f24:	19 82       	std	Y+1, r1	; 0x01
     f26:	ae c0       	rjmp	.+348    	; 0x1084 <SETPINDIrection+0x242>
							}
				break;
				  
				case PORTB:
				switch(STATE)
     f28:	8c 81       	ldd	r24, Y+4	; 0x04
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	3a 87       	std	Y+10, r19	; 0x0a
     f30:	29 87       	std	Y+9, r18	; 0x09
     f32:	89 85       	ldd	r24, Y+9	; 0x09
     f34:	9a 85       	ldd	r25, Y+10	; 0x0a
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	c9 f0       	breq	.+50     	; 0xf6c <SETPINDIrection+0x12a>
     f3a:	29 85       	ldd	r18, Y+9	; 0x09
     f3c:	3a 85       	ldd	r19, Y+10	; 0x0a
     f3e:	21 30       	cpi	r18, 0x01	; 1
     f40:	31 05       	cpc	r19, r1
     f42:	49 f5       	brne	.+82     	; 0xf96 <SETPINDIrection+0x154>
							{
								case PIN_OUTPUT:
									set(DDRB,PIN);
     f44:	a7 e3       	ldi	r26, 0x37	; 55
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e7 e3       	ldi	r30, 0x37	; 55
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	02 2e       	mov	r0, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <SETPINDIrection+0x120>
     f5e:	88 0f       	add	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	0a 94       	dec	r0
     f64:	e2 f7       	brpl	.-8      	; 0xf5e <SETPINDIrection+0x11c>
     f66:	84 2b       	or	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	8c c0       	rjmp	.+280    	; 0x1084 <SETPINDIrection+0x242>
									break;
								case PIN_INPUT:
									clear(DDRB,PIN);
     f6c:	a7 e3       	ldi	r26, 0x37	; 55
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e7 e3       	ldi	r30, 0x37	; 55
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <SETPINDIrection+0x148>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <SETPINDIrection+0x144>
     f8e:	80 95       	com	r24
     f90:	84 23       	and	r24, r20
     f92:	8c 93       	st	X, r24
     f94:	77 c0       	rjmp	.+238    	; 0x1084 <SETPINDIrection+0x242>
									break;
								default: loc_variable = E_NOK;
     f96:	19 82       	std	Y+1, r1	; 0x01
     f98:	75 c0       	rjmp	.+234    	; 0x1084 <SETPINDIrection+0x242>
							}
				break;
				case PORTC:
				switch(STATE)
     f9a:	8c 81       	ldd	r24, Y+4	; 0x04
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	38 87       	std	Y+8, r19	; 0x08
     fa2:	2f 83       	std	Y+7, r18	; 0x07
     fa4:	8f 81       	ldd	r24, Y+7	; 0x07
     fa6:	98 85       	ldd	r25, Y+8	; 0x08
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	c9 f0       	breq	.+50     	; 0xfde <SETPINDIrection+0x19c>
     fac:	2f 81       	ldd	r18, Y+7	; 0x07
     fae:	38 85       	ldd	r19, Y+8	; 0x08
     fb0:	21 30       	cpi	r18, 0x01	; 1
     fb2:	31 05       	cpc	r19, r1
     fb4:	49 f5       	brne	.+82     	; 0x1008 <SETPINDIrection+0x1c6>
							{
								case PIN_OUTPUT:
									set(DDRC,PIN);
     fb6:	a4 e3       	ldi	r26, 0x34	; 52
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e4 e3       	ldi	r30, 0x34	; 52
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	48 2f       	mov	r20, r24
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 2e       	mov	r0, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <SETPINDIrection+0x192>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <SETPINDIrection+0x18e>
     fd8:	84 2b       	or	r24, r20
     fda:	8c 93       	st	X, r24
     fdc:	53 c0       	rjmp	.+166    	; 0x1084 <SETPINDIrection+0x242>
									break;
								case PIN_INPUT:
									clear(DDRC,PIN);
     fde:	a4 e3       	ldi	r26, 0x34	; 52
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e4 e3       	ldi	r30, 0x34	; 52
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <SETPINDIrection+0x1ba>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <SETPINDIrection+0x1b6>
    1000:	80 95       	com	r24
    1002:	84 23       	and	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	3e c0       	rjmp	.+124    	; 0x1084 <SETPINDIrection+0x242>
									break;
								default: loc_variable = E_NOK;
    1008:	19 82       	std	Y+1, r1	; 0x01
    100a:	3c c0       	rjmp	.+120    	; 0x1084 <SETPINDIrection+0x242>
							}
				break;
				case PORTD:
				switch(STATE)
    100c:	8c 81       	ldd	r24, Y+4	; 0x04
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	3e 83       	std	Y+6, r19	; 0x06
    1014:	2d 83       	std	Y+5, r18	; 0x05
    1016:	8d 81       	ldd	r24, Y+5	; 0x05
    1018:	9e 81       	ldd	r25, Y+6	; 0x06
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	c9 f0       	breq	.+50     	; 0x1050 <SETPINDIrection+0x20e>
    101e:	2d 81       	ldd	r18, Y+5	; 0x05
    1020:	3e 81       	ldd	r19, Y+6	; 0x06
    1022:	21 30       	cpi	r18, 0x01	; 1
    1024:	31 05       	cpc	r19, r1
    1026:	49 f5       	brne	.+82     	; 0x107a <SETPINDIrection+0x238>
							{
								case PIN_OUTPUT:
									set(DDRD,PIN);
    1028:	a1 e3       	ldi	r26, 0x31	; 49
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e1 e3       	ldi	r30, 0x31	; 49
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	48 2f       	mov	r20, r24
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	02 2e       	mov	r0, r18
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <SETPINDIrection+0x204>
    1042:	88 0f       	add	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	0a 94       	dec	r0
    1048:	e2 f7       	brpl	.-8      	; 0x1042 <SETPINDIrection+0x200>
    104a:	84 2b       	or	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	1a c0       	rjmp	.+52     	; 0x1084 <SETPINDIrection+0x242>
									break;
								case PIN_INPUT:
									clear(DDRD,PIN);
    1050:	a1 e3       	ldi	r26, 0x31	; 49
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e1 e3       	ldi	r30, 0x31	; 49
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	48 2f       	mov	r20, r24
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 2e       	mov	r0, r18
    1068:	02 c0       	rjmp	.+4      	; 0x106e <SETPINDIrection+0x22c>
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	0a 94       	dec	r0
    1070:	e2 f7       	brpl	.-8      	; 0x106a <SETPINDIrection+0x228>
    1072:	80 95       	com	r24
    1074:	84 23       	and	r24, r20
    1076:	8c 93       	st	X, r24
    1078:	05 c0       	rjmp	.+10     	; 0x1084 <SETPINDIrection+0x242>
									break;
								default: loc_variable = E_NOK;
    107a:	19 82       	std	Y+1, r1	; 0x01
    107c:	03 c0       	rjmp	.+6      	; 0x1084 <SETPINDIrection+0x242>
							}
				break;
				default : loc_variable = E_NOK;
    107e:	19 82       	std	Y+1, r1	; 0x01
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <SETPINDIrection+0x242>

		}
	}
	else 
	{
		 loc_variable = E_NOK;
    1082:	19 82       	std	Y+1, r1	; 0x01
	}
return loc_variable;
    1084:	89 81       	ldd	r24, Y+1	; 0x01
}
    1086:	2e 96       	adiw	r28, 0x0e	; 14
    1088:	0f b6       	in	r0, 0x3f	; 63
    108a:	f8 94       	cli
    108c:	de bf       	out	0x3e, r29	; 62
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	cd bf       	out	0x3d, r28	; 61
    1092:	cf 91       	pop	r28
    1094:	df 91       	pop	r29
    1096:	08 95       	ret

00001098 <setpinvalue>:

ERROR_status setpinvalue(uint8 PORT, uint8 PIN, uint8 value)
{
    1098:	df 93       	push	r29
    109a:	cf 93       	push	r28
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	2e 97       	sbiw	r28, 0x0e	; 14
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	cd bf       	out	0x3d, r28	; 61
    10ac:	8a 83       	std	Y+2, r24	; 0x02
    10ae:	6b 83       	std	Y+3, r22	; 0x03
    10b0:	4c 83       	std	Y+4, r20	; 0x04
	ERROR_status loc_variable = E_OK;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	89 83       	std	Y+1, r24	; 0x01
	if(PORT>=PORTA && PORT <=PORTD)
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	88 23       	and	r24, r24
    10ba:	09 f4       	brne	.+2      	; 0x10be <setpinvalue+0x26>
    10bc:	0d c1       	rjmp	.+538    	; 0x12d8 <setpinvalue+0x240>
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	85 30       	cpi	r24, 0x05	; 5
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <setpinvalue+0x2e>
    10c4:	09 c1       	rjmp	.+530    	; 0x12d8 <setpinvalue+0x240>
	{
		switch(PORT){
    10c6:	8a 81       	ldd	r24, Y+2	; 0x02
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3e 87       	std	Y+14, r19	; 0x0e
    10ce:	2d 87       	std	Y+13, r18	; 0x0d
    10d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d4:	82 30       	cpi	r24, 0x02	; 2
    10d6:	91 05       	cpc	r25, r1
    10d8:	09 f4       	brne	.+2      	; 0x10dc <setpinvalue+0x44>
    10da:	51 c0       	rjmp	.+162    	; 0x117e <setpinvalue+0xe6>
    10dc:	2d 85       	ldd	r18, Y+13	; 0x0d
    10de:	3e 85       	ldd	r19, Y+14	; 0x0e
    10e0:	23 30       	cpi	r18, 0x03	; 3
    10e2:	31 05       	cpc	r19, r1
    10e4:	34 f4       	brge	.+12     	; 0x10f2 <setpinvalue+0x5a>
    10e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	91 05       	cpc	r25, r1
    10ee:	71 f0       	breq	.+28     	; 0x110c <setpinvalue+0x74>
    10f0:	f1 c0       	rjmp	.+482    	; 0x12d4 <setpinvalue+0x23c>
    10f2:	2d 85       	ldd	r18, Y+13	; 0x0d
    10f4:	3e 85       	ldd	r19, Y+14	; 0x0e
    10f6:	23 30       	cpi	r18, 0x03	; 3
    10f8:	31 05       	cpc	r19, r1
    10fa:	09 f4       	brne	.+2      	; 0x10fe <setpinvalue+0x66>
    10fc:	79 c0       	rjmp	.+242    	; 0x11f0 <setpinvalue+0x158>
    10fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1100:	9e 85       	ldd	r25, Y+14	; 0x0e
    1102:	84 30       	cpi	r24, 0x04	; 4
    1104:	91 05       	cpc	r25, r1
    1106:	09 f4       	brne	.+2      	; 0x110a <setpinvalue+0x72>
    1108:	ac c0       	rjmp	.+344    	; 0x1262 <setpinvalue+0x1ca>
    110a:	e4 c0       	rjmp	.+456    	; 0x12d4 <setpinvalue+0x23c>
		
				case PORTA:
							switch(value)
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	3c 87       	std	Y+12, r19	; 0x0c
    1114:	2b 87       	std	Y+11, r18	; 0x0b
    1116:	8b 85       	ldd	r24, Y+11	; 0x0b
    1118:	9c 85       	ldd	r25, Y+12	; 0x0c
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	c9 f0       	breq	.+50     	; 0x1150 <setpinvalue+0xb8>
    111e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1120:	3c 85       	ldd	r19, Y+12	; 0x0c
    1122:	21 30       	cpi	r18, 0x01	; 1
    1124:	31 05       	cpc	r19, r1
    1126:	49 f5       	brne	.+82     	; 0x117a <setpinvalue+0xe2>
							{
								case HIGH:
									set(DIO_PORTA,PIN);
    1128:	ab e3       	ldi	r26, 0x3B	; 59
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	eb e3       	ldi	r30, 0x3B	; 59
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <setpinvalue+0xae>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <setpinvalue+0xaa>
    114a:	84 2b       	or	r24, r20
    114c:	8c 93       	st	X, r24
    114e:	c5 c0       	rjmp	.+394    	; 0x12da <setpinvalue+0x242>
									break;
								case LOW:
									clear(DIO_PORTA,PIN);
    1150:	ab e3       	ldi	r26, 0x3B	; 59
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	eb e3       	ldi	r30, 0x3B	; 59
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <setpinvalue+0xd6>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <setpinvalue+0xd2>
    1172:	80 95       	com	r24
    1174:	84 23       	and	r24, r20
    1176:	8c 93       	st	X, r24
    1178:	b0 c0       	rjmp	.+352    	; 0x12da <setpinvalue+0x242>
									break;
								default: loc_variable = E_NOK;
    117a:	19 82       	std	Y+1, r1	; 0x01
    117c:	ae c0       	rjmp	.+348    	; 0x12da <setpinvalue+0x242>
							}
				break;
				  
				case PORTB:
				switch(value)
    117e:	8c 81       	ldd	r24, Y+4	; 0x04
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	3a 87       	std	Y+10, r19	; 0x0a
    1186:	29 87       	std	Y+9, r18	; 0x09
    1188:	89 85       	ldd	r24, Y+9	; 0x09
    118a:	9a 85       	ldd	r25, Y+10	; 0x0a
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	c9 f0       	breq	.+50     	; 0x11c2 <setpinvalue+0x12a>
    1190:	29 85       	ldd	r18, Y+9	; 0x09
    1192:	3a 85       	ldd	r19, Y+10	; 0x0a
    1194:	21 30       	cpi	r18, 0x01	; 1
    1196:	31 05       	cpc	r19, r1
    1198:	49 f5       	brne	.+82     	; 0x11ec <setpinvalue+0x154>
							{
								case HIGH:
									set(DIO_PORTB,PIN);
    119a:	a8 e3       	ldi	r26, 0x38	; 56
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e8 e3       	ldi	r30, 0x38	; 56
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <setpinvalue+0x120>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <setpinvalue+0x11c>
    11bc:	84 2b       	or	r24, r20
    11be:	8c 93       	st	X, r24
    11c0:	8c c0       	rjmp	.+280    	; 0x12da <setpinvalue+0x242>
									break;
								case LOW:
									clear(DIO_PORTB,PIN);
    11c2:	a8 e3       	ldi	r26, 0x38	; 56
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e8 e3       	ldi	r30, 0x38	; 56
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <setpinvalue+0x148>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <setpinvalue+0x144>
    11e4:	80 95       	com	r24
    11e6:	84 23       	and	r24, r20
    11e8:	8c 93       	st	X, r24
    11ea:	77 c0       	rjmp	.+238    	; 0x12da <setpinvalue+0x242>
									break;
								default: loc_variable = E_NOK;
    11ec:	19 82       	std	Y+1, r1	; 0x01
    11ee:	75 c0       	rjmp	.+234    	; 0x12da <setpinvalue+0x242>
							}
				break;
				case PORTC:
				switch(value)
    11f0:	8c 81       	ldd	r24, Y+4	; 0x04
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	38 87       	std	Y+8, r19	; 0x08
    11f8:	2f 83       	std	Y+7, r18	; 0x07
    11fa:	8f 81       	ldd	r24, Y+7	; 0x07
    11fc:	98 85       	ldd	r25, Y+8	; 0x08
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	c9 f0       	breq	.+50     	; 0x1234 <setpinvalue+0x19c>
    1202:	2f 81       	ldd	r18, Y+7	; 0x07
    1204:	38 85       	ldd	r19, Y+8	; 0x08
    1206:	21 30       	cpi	r18, 0x01	; 1
    1208:	31 05       	cpc	r19, r1
    120a:	49 f5       	brne	.+82     	; 0x125e <setpinvalue+0x1c6>
							{
								case HIGH:
									set(DIO_PORTC,PIN);
    120c:	a5 e3       	ldi	r26, 0x35	; 53
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e5 e3       	ldi	r30, 0x35	; 53
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	48 2f       	mov	r20, r24
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 2e       	mov	r0, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <setpinvalue+0x192>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	0a 94       	dec	r0
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <setpinvalue+0x18e>
    122e:	84 2b       	or	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	53 c0       	rjmp	.+166    	; 0x12da <setpinvalue+0x242>
									break;
								case LOW:
									clear(DIO_PORTC,PIN);
    1234:	a5 e3       	ldi	r26, 0x35	; 53
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e5 e3       	ldi	r30, 0x35	; 53
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <setpinvalue+0x1ba>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <setpinvalue+0x1b6>
    1256:	80 95       	com	r24
    1258:	84 23       	and	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	3e c0       	rjmp	.+124    	; 0x12da <setpinvalue+0x242>
									break;
								default: loc_variable = E_NOK;
    125e:	19 82       	std	Y+1, r1	; 0x01
    1260:	3c c0       	rjmp	.+120    	; 0x12da <setpinvalue+0x242>
							}
				break;
				case PORTD:
				switch(value)
    1262:	8c 81       	ldd	r24, Y+4	; 0x04
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	3e 83       	std	Y+6, r19	; 0x06
    126a:	2d 83       	std	Y+5, r18	; 0x05
    126c:	8d 81       	ldd	r24, Y+5	; 0x05
    126e:	9e 81       	ldd	r25, Y+6	; 0x06
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	c9 f0       	breq	.+50     	; 0x12a6 <setpinvalue+0x20e>
    1274:	2d 81       	ldd	r18, Y+5	; 0x05
    1276:	3e 81       	ldd	r19, Y+6	; 0x06
    1278:	21 30       	cpi	r18, 0x01	; 1
    127a:	31 05       	cpc	r19, r1
    127c:	49 f5       	brne	.+82     	; 0x12d0 <setpinvalue+0x238>
							{
								case PIN_OUTPUT:
									set(DIO_PORTD,PIN);
    127e:	a2 e3       	ldi	r26, 0x32	; 50
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e2 e3       	ldi	r30, 0x32	; 50
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <setpinvalue+0x204>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <setpinvalue+0x200>
    12a0:	84 2b       	or	r24, r20
    12a2:	8c 93       	st	X, r24
    12a4:	1a c0       	rjmp	.+52     	; 0x12da <setpinvalue+0x242>
									break;
								case PIN_INPUT:
									clear(DIO_PORTD,PIN);
    12a6:	a2 e3       	ldi	r26, 0x32	; 50
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e2 e3       	ldi	r30, 0x32	; 50
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	48 2f       	mov	r20, r24
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 2e       	mov	r0, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <setpinvalue+0x22c>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <setpinvalue+0x228>
    12c8:	80 95       	com	r24
    12ca:	84 23       	and	r24, r20
    12cc:	8c 93       	st	X, r24
    12ce:	05 c0       	rjmp	.+10     	; 0x12da <setpinvalue+0x242>
									break;
								default: loc_variable = E_NOK;
    12d0:	19 82       	std	Y+1, r1	; 0x01
    12d2:	03 c0       	rjmp	.+6      	; 0x12da <setpinvalue+0x242>
							}
				break;
				default : loc_variable = E_NOK;
    12d4:	19 82       	std	Y+1, r1	; 0x01
    12d6:	01 c0       	rjmp	.+2      	; 0x12da <setpinvalue+0x242>
		}
	}
	else 
	{
		 loc_variable = E_NOK;
    12d8:	19 82       	std	Y+1, r1	; 0x01
	}
return loc_variable;
    12da:	89 81       	ldd	r24, Y+1	; 0x01

}
    12dc:	2e 96       	adiw	r28, 0x0e	; 14
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <getpinvalue>:


ERROR_status getpinvalue(uint8 PORT, uint8 PIN, uint8 *value)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	27 97       	sbiw	r28, 0x07	; 7
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	8a 83       	std	Y+2, r24	; 0x02
    1304:	6b 83       	std	Y+3, r22	; 0x03
    1306:	5d 83       	std	Y+5, r21	; 0x05
    1308:	4c 83       	std	Y+4, r20	; 0x04
 	ERROR_status loc_variable = E_OK;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	89 83       	std	Y+1, r24	; 0x01
	if(PORT>=PORTA && PORT <=PORTD)
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	88 23       	and	r24, r24
    1312:	09 f4       	brne	.+2      	; 0x1316 <getpinvalue+0x28>
    1314:	77 c0       	rjmp	.+238    	; 0x1404 <getpinvalue+0x116>
    1316:	8a 81       	ldd	r24, Y+2	; 0x02
    1318:	85 30       	cpi	r24, 0x05	; 5
    131a:	08 f0       	brcs	.+2      	; 0x131e <getpinvalue+0x30>
    131c:	73 c0       	rjmp	.+230    	; 0x1404 <getpinvalue+0x116>
	{
		switch(PORT){
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	3f 83       	std	Y+7, r19	; 0x07
    1326:	2e 83       	std	Y+6, r18	; 0x06
    1328:	4e 81       	ldd	r20, Y+6	; 0x06
    132a:	5f 81       	ldd	r21, Y+7	; 0x07
    132c:	42 30       	cpi	r20, 0x02	; 2
    132e:	51 05       	cpc	r21, r1
    1330:	59 f1       	breq	.+86     	; 0x1388 <getpinvalue+0x9a>
    1332:	8e 81       	ldd	r24, Y+6	; 0x06
    1334:	9f 81       	ldd	r25, Y+7	; 0x07
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	91 05       	cpc	r25, r1
    133a:	34 f4       	brge	.+12     	; 0x1348 <getpinvalue+0x5a>
    133c:	2e 81       	ldd	r18, Y+6	; 0x06
    133e:	3f 81       	ldd	r19, Y+7	; 0x07
    1340:	21 30       	cpi	r18, 0x01	; 1
    1342:	31 05       	cpc	r19, r1
    1344:	69 f0       	breq	.+26     	; 0x1360 <getpinvalue+0x72>
    1346:	5c c0       	rjmp	.+184    	; 0x1400 <getpinvalue+0x112>
    1348:	4e 81       	ldd	r20, Y+6	; 0x06
    134a:	5f 81       	ldd	r21, Y+7	; 0x07
    134c:	43 30       	cpi	r20, 0x03	; 3
    134e:	51 05       	cpc	r21, r1
    1350:	79 f1       	breq	.+94     	; 0x13b0 <getpinvalue+0xc2>
    1352:	8e 81       	ldd	r24, Y+6	; 0x06
    1354:	9f 81       	ldd	r25, Y+7	; 0x07
    1356:	84 30       	cpi	r24, 0x04	; 4
    1358:	91 05       	cpc	r25, r1
    135a:	09 f4       	brne	.+2      	; 0x135e <getpinvalue+0x70>
    135c:	3d c0       	rjmp	.+122    	; 0x13d8 <getpinvalue+0xea>
    135e:	50 c0       	rjmp	.+160    	; 0x1400 <getpinvalue+0x112>
		
				case PORTA:
						*value = getbit(PINA,PIN);
    1360:	e9 e3       	ldi	r30, 0x39	; 57
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	88 2f       	mov	r24, r24
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	a9 01       	movw	r20, r18
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <getpinvalue+0x8a>
    1374:	55 95       	asr	r21
    1376:	47 95       	ror	r20
    1378:	8a 95       	dec	r24
    137a:	e2 f7       	brpl	.-8      	; 0x1374 <getpinvalue+0x86>
    137c:	ca 01       	movw	r24, r20
    137e:	81 70       	andi	r24, 0x01	; 1
    1380:	ec 81       	ldd	r30, Y+4	; 0x04
    1382:	fd 81       	ldd	r31, Y+5	; 0x05
    1384:	80 83       	st	Z, r24
    1386:	3f c0       	rjmp	.+126    	; 0x1406 <getpinvalue+0x118>
						break;
				case PORTB:
						*value = getbit(PINB,PIN);
    1388:	e6 e3       	ldi	r30, 0x36	; 54
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	88 2f       	mov	r24, r24
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a9 01       	movw	r20, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <getpinvalue+0xb2>
    139c:	55 95       	asr	r21
    139e:	47 95       	ror	r20
    13a0:	8a 95       	dec	r24
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <getpinvalue+0xae>
    13a4:	ca 01       	movw	r24, r20
    13a6:	81 70       	andi	r24, 0x01	; 1
    13a8:	ec 81       	ldd	r30, Y+4	; 0x04
    13aa:	fd 81       	ldd	r31, Y+5	; 0x05
    13ac:	80 83       	st	Z, r24
    13ae:	2b c0       	rjmp	.+86     	; 0x1406 <getpinvalue+0x118>
						break;
				case PORTC:
						*value = getbit(PINC,PIN);
    13b0:	e3 e3       	ldi	r30, 0x33	; 51
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	88 2f       	mov	r24, r24
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	a9 01       	movw	r20, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <getpinvalue+0xda>
    13c4:	55 95       	asr	r21
    13c6:	47 95       	ror	r20
    13c8:	8a 95       	dec	r24
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <getpinvalue+0xd6>
    13cc:	ca 01       	movw	r24, r20
    13ce:	81 70       	andi	r24, 0x01	; 1
    13d0:	ec 81       	ldd	r30, Y+4	; 0x04
    13d2:	fd 81       	ldd	r31, Y+5	; 0x05
    13d4:	80 83       	st	Z, r24
    13d6:	17 c0       	rjmp	.+46     	; 0x1406 <getpinvalue+0x118>
						break;
				case PORTD:
						*value = getbit(PIND,PIN);
    13d8:	e0 e3       	ldi	r30, 0x30	; 48
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	88 2f       	mov	r24, r24
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a9 01       	movw	r20, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <getpinvalue+0x102>
    13ec:	55 95       	asr	r21
    13ee:	47 95       	ror	r20
    13f0:	8a 95       	dec	r24
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <getpinvalue+0xfe>
    13f4:	ca 01       	movw	r24, r20
    13f6:	81 70       	andi	r24, 0x01	; 1
    13f8:	ec 81       	ldd	r30, Y+4	; 0x04
    13fa:	fd 81       	ldd	r31, Y+5	; 0x05
    13fc:	80 83       	st	Z, r24
    13fe:	03 c0       	rjmp	.+6      	; 0x1406 <getpinvalue+0x118>
						break;
				default : loc_variable = E_NOK;
    1400:	19 82       	std	Y+1, r1	; 0x01
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <getpinvalue+0x118>
		}
	}
	else 
	{
		 loc_variable = E_NOK;
    1404:	19 82       	std	Y+1, r1	; 0x01
	}
return loc_variable;
    1406:	89 81       	ldd	r24, Y+1	; 0x01
}
    1408:	27 96       	adiw	r28, 0x07	; 7
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <togglepinvalue>:

ERROR_status togglepinvalue(uint8 PORT, uint8 PIN)
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <togglepinvalue+0x6>
    1420:	00 d0       	rcall	.+0      	; 0x1422 <togglepinvalue+0x8>
    1422:	0f 92       	push	r0
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	8a 83       	std	Y+2, r24	; 0x02
    142a:	6b 83       	std	Y+3, r22	; 0x03
	ERROR_status loc_variable = E_OK;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	89 83       	std	Y+1, r24	; 0x01
	if(PORT>=PORTA && PORT <=PORTD)
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	88 23       	and	r24, r24
    1434:	09 f4       	brne	.+2      	; 0x1438 <togglepinvalue+0x1e>
    1436:	76 c0       	rjmp	.+236    	; 0x1524 <togglepinvalue+0x10a>
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	85 30       	cpi	r24, 0x05	; 5
    143c:	08 f0       	brcs	.+2      	; 0x1440 <togglepinvalue+0x26>
    143e:	72 c0       	rjmp	.+228    	; 0x1524 <togglepinvalue+0x10a>
	{
		switch(PORT){
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	3d 83       	std	Y+5, r19	; 0x05
    1448:	2c 83       	std	Y+4, r18	; 0x04
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	9d 81       	ldd	r25, Y+5	; 0x05
    144e:	82 30       	cpi	r24, 0x02	; 2
    1450:	91 05       	cpc	r25, r1
    1452:	51 f1       	breq	.+84     	; 0x14a8 <togglepinvalue+0x8e>
    1454:	2c 81       	ldd	r18, Y+4	; 0x04
    1456:	3d 81       	ldd	r19, Y+5	; 0x05
    1458:	23 30       	cpi	r18, 0x03	; 3
    145a:	31 05       	cpc	r19, r1
    145c:	34 f4       	brge	.+12     	; 0x146a <togglepinvalue+0x50>
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
    1460:	9d 81       	ldd	r25, Y+5	; 0x05
    1462:	81 30       	cpi	r24, 0x01	; 1
    1464:	91 05       	cpc	r25, r1
    1466:	61 f0       	breq	.+24     	; 0x1480 <togglepinvalue+0x66>
    1468:	5b c0       	rjmp	.+182    	; 0x1520 <togglepinvalue+0x106>
    146a:	2c 81       	ldd	r18, Y+4	; 0x04
    146c:	3d 81       	ldd	r19, Y+5	; 0x05
    146e:	23 30       	cpi	r18, 0x03	; 3
    1470:	31 05       	cpc	r19, r1
    1472:	71 f1       	breq	.+92     	; 0x14d0 <togglepinvalue+0xb6>
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	9d 81       	ldd	r25, Y+5	; 0x05
    1478:	84 30       	cpi	r24, 0x04	; 4
    147a:	91 05       	cpc	r25, r1
    147c:	e9 f1       	breq	.+122    	; 0x14f8 <togglepinvalue+0xde>
    147e:	50 c0       	rjmp	.+160    	; 0x1520 <togglepinvalue+0x106>
		
				case PORTA:
						toggle(DIO_PORTA,PIN);
    1480:	ab e3       	ldi	r26, 0x3B	; 59
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	02 2e       	mov	r0, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <togglepinvalue+0x7c>
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	0a 94       	dec	r0
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <togglepinvalue+0x78>
    149a:	98 2f       	mov	r25, r24
    149c:	eb e3       	ldi	r30, 0x3B	; 59
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	89 27       	eor	r24, r25
    14a4:	8c 93       	st	X, r24
    14a6:	3f c0       	rjmp	.+126    	; 0x1526 <togglepinvalue+0x10c>
						break;
				case PORTB:
						toggle(DIO_PORTB,PIN);
    14a8:	a8 e3       	ldi	r26, 0x38	; 56
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	02 2e       	mov	r0, r18
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <togglepinvalue+0xa4>
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	0a 94       	dec	r0
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <togglepinvalue+0xa0>
    14c2:	98 2f       	mov	r25, r24
    14c4:	e8 e3       	ldi	r30, 0x38	; 56
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	89 27       	eor	r24, r25
    14cc:	8c 93       	st	X, r24
    14ce:	2b c0       	rjmp	.+86     	; 0x1526 <togglepinvalue+0x10c>
						break;
				case PORTC:
						  toggle(DIO_PORTC,PIN);
    14d0:	a5 e3       	ldi	r26, 0x35	; 53
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	02 2e       	mov	r0, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <togglepinvalue+0xcc>
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	0a 94       	dec	r0
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <togglepinvalue+0xc8>
    14ea:	98 2f       	mov	r25, r24
    14ec:	e5 e3       	ldi	r30, 0x35	; 53
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	89 27       	eor	r24, r25
    14f4:	8c 93       	st	X, r24
    14f6:	17 c0       	rjmp	.+46     	; 0x1526 <togglepinvalue+0x10c>
						break;
				case PORTD:
				  toggle(DIO_PORTC,PIN);
    14f8:	a5 e3       	ldi	r26, 0x35	; 53
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 2e       	mov	r0, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <togglepinvalue+0xf4>
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	0a 94       	dec	r0
    1510:	e2 f7       	brpl	.-8      	; 0x150a <togglepinvalue+0xf0>
    1512:	98 2f       	mov	r25, r24
    1514:	e5 e3       	ldi	r30, 0x35	; 53
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	89 27       	eor	r24, r25
    151c:	8c 93       	st	X, r24
    151e:	03 c0       	rjmp	.+6      	; 0x1526 <togglepinvalue+0x10c>
				break;
				default : loc_variable = E_NOK;
    1520:	19 82       	std	Y+1, r1	; 0x01
    1522:	01 c0       	rjmp	.+2      	; 0x1526 <togglepinvalue+0x10c>
		}
	}
	else 
	{
		 loc_variable = E_NOK;
    1524:	19 82       	std	Y+1, r1	; 0x01
	}
return loc_variable;
    1526:	89 81       	ldd	r24, Y+1	; 0x01
}
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <ControlPortDIR>:

ERROR_status ControlPortDIR(uint8 PORT, uint8 DIRECTION)
{
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	00 d0       	rcall	.+0      	; 0x153e <ControlPortDIR+0x6>
    153e:	00 d0       	rcall	.+0      	; 0x1540 <ControlPortDIR+0x8>
    1540:	0f 92       	push	r0
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
    1546:	8a 83       	std	Y+2, r24	; 0x02
    1548:	6b 83       	std	Y+3, r22	; 0x03
	ERROR_status loc_variable = E_OK;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	89 83       	std	Y+1, r24	; 0x01
	if(PORT>=PORTA && PORT <=PORTD)
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	88 23       	and	r24, r24
    1552:	c9 f1       	breq	.+114    	; 0x15c6 <ControlPortDIR+0x8e>
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	85 30       	cpi	r24, 0x05	; 5
    1558:	b0 f5       	brcc	.+108    	; 0x15c6 <ControlPortDIR+0x8e>
	{
		switch(PORT){
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	3d 83       	std	Y+5, r19	; 0x05
    1562:	2c 83       	std	Y+4, r18	; 0x04
    1564:	8c 81       	ldd	r24, Y+4	; 0x04
    1566:	9d 81       	ldd	r25, Y+5	; 0x05
    1568:	82 30       	cpi	r24, 0x02	; 2
    156a:	91 05       	cpc	r25, r1
    156c:	d9 f0       	breq	.+54     	; 0x15a4 <ControlPortDIR+0x6c>
    156e:	2c 81       	ldd	r18, Y+4	; 0x04
    1570:	3d 81       	ldd	r19, Y+5	; 0x05
    1572:	23 30       	cpi	r18, 0x03	; 3
    1574:	31 05       	cpc	r19, r1
    1576:	34 f4       	brge	.+12     	; 0x1584 <ControlPortDIR+0x4c>
    1578:	8c 81       	ldd	r24, Y+4	; 0x04
    157a:	9d 81       	ldd	r25, Y+5	; 0x05
    157c:	81 30       	cpi	r24, 0x01	; 1
    157e:	91 05       	cpc	r25, r1
    1580:	61 f0       	breq	.+24     	; 0x159a <ControlPortDIR+0x62>
    1582:	1f c0       	rjmp	.+62     	; 0x15c2 <ControlPortDIR+0x8a>
    1584:	2c 81       	ldd	r18, Y+4	; 0x04
    1586:	3d 81       	ldd	r19, Y+5	; 0x05
    1588:	23 30       	cpi	r18, 0x03	; 3
    158a:	31 05       	cpc	r19, r1
    158c:	81 f0       	breq	.+32     	; 0x15ae <ControlPortDIR+0x76>
    158e:	8c 81       	ldd	r24, Y+4	; 0x04
    1590:	9d 81       	ldd	r25, Y+5	; 0x05
    1592:	84 30       	cpi	r24, 0x04	; 4
    1594:	91 05       	cpc	r25, r1
    1596:	81 f0       	breq	.+32     	; 0x15b8 <ControlPortDIR+0x80>
    1598:	14 c0       	rjmp	.+40     	; 0x15c2 <ControlPortDIR+0x8a>
		
				case PORTA:
						DDRA = DIRECTION;
    159a:	ea e3       	ldi	r30, 0x3A	; 58
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	80 83       	st	Z, r24
    15a2:	12 c0       	rjmp	.+36     	; 0x15c8 <ControlPortDIR+0x90>
						
						break;
				case PORTB:
			     DDRA = DIRECTION;
    15a4:	ea e3       	ldi	r30, 0x3A	; 58
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	80 83       	st	Z, r24
    15ac:	0d c0       	rjmp	.+26     	; 0x15c8 <ControlPortDIR+0x90>
						
						break;
				case PORTC:
						DDRA = DIRECTION;
    15ae:	ea e3       	ldi	r30, 0x3A	; 58
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	8b 81       	ldd	r24, Y+3	; 0x03
    15b4:	80 83       	st	Z, r24
    15b6:	08 c0       	rjmp	.+16     	; 0x15c8 <ControlPortDIR+0x90>
						
						break;
				case PORTD:
				 DDRA = DIRECTION;
    15b8:	ea e3       	ldi	r30, 0x3A	; 58
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	8b 81       	ldd	r24, Y+3	; 0x03
    15be:	80 83       	st	Z, r24
    15c0:	03 c0       	rjmp	.+6      	; 0x15c8 <ControlPortDIR+0x90>
						
						break;
				default : loc_variable = E_NOK;
    15c2:	19 82       	std	Y+1, r1	; 0x01
    15c4:	01 c0       	rjmp	.+2      	; 0x15c8 <ControlPortDIR+0x90>
		}
	}
	else 
	{
		 loc_variable = E_NOK;
    15c6:	19 82       	std	Y+1, r1	; 0x01
	}
return loc_variable;
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	cf 91       	pop	r28
    15d6:	df 91       	pop	r29
    15d8:	08 95       	ret

000015da <controlPortValue>:
ERROR_status controlPortValue(uint8 PORT, uint8 value)
{
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <controlPortValue+0x6>
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <controlPortValue+0x8>
    15e2:	0f 92       	push	r0
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
    15e8:	8a 83       	std	Y+2, r24	; 0x02
    15ea:	6b 83       	std	Y+3, r22	; 0x03
	ERROR_status loc_variable = E_OK;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	89 83       	std	Y+1, r24	; 0x01
	if(PORT>=PORTA && PORT <=PORTD)
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	88 23       	and	r24, r24
    15f4:	c9 f1       	breq	.+114    	; 0x1668 <controlPortValue+0x8e>
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	85 30       	cpi	r24, 0x05	; 5
    15fa:	b0 f5       	brcc	.+108    	; 0x1668 <controlPortValue+0x8e>
	{
		switch(PORT){
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	3d 83       	std	Y+5, r19	; 0x05
    1604:	2c 83       	std	Y+4, r18	; 0x04
    1606:	8c 81       	ldd	r24, Y+4	; 0x04
    1608:	9d 81       	ldd	r25, Y+5	; 0x05
    160a:	82 30       	cpi	r24, 0x02	; 2
    160c:	91 05       	cpc	r25, r1
    160e:	d9 f0       	breq	.+54     	; 0x1646 <controlPortValue+0x6c>
    1610:	2c 81       	ldd	r18, Y+4	; 0x04
    1612:	3d 81       	ldd	r19, Y+5	; 0x05
    1614:	23 30       	cpi	r18, 0x03	; 3
    1616:	31 05       	cpc	r19, r1
    1618:	34 f4       	brge	.+12     	; 0x1626 <controlPortValue+0x4c>
    161a:	8c 81       	ldd	r24, Y+4	; 0x04
    161c:	9d 81       	ldd	r25, Y+5	; 0x05
    161e:	81 30       	cpi	r24, 0x01	; 1
    1620:	91 05       	cpc	r25, r1
    1622:	61 f0       	breq	.+24     	; 0x163c <controlPortValue+0x62>
    1624:	1f c0       	rjmp	.+62     	; 0x1664 <controlPortValue+0x8a>
    1626:	2c 81       	ldd	r18, Y+4	; 0x04
    1628:	3d 81       	ldd	r19, Y+5	; 0x05
    162a:	23 30       	cpi	r18, 0x03	; 3
    162c:	31 05       	cpc	r19, r1
    162e:	81 f0       	breq	.+32     	; 0x1650 <controlPortValue+0x76>
    1630:	8c 81       	ldd	r24, Y+4	; 0x04
    1632:	9d 81       	ldd	r25, Y+5	; 0x05
    1634:	84 30       	cpi	r24, 0x04	; 4
    1636:	91 05       	cpc	r25, r1
    1638:	81 f0       	breq	.+32     	; 0x165a <controlPortValue+0x80>
    163a:	14 c0       	rjmp	.+40     	; 0x1664 <controlPortValue+0x8a>
		
				case PORTA:
						DIO_PORTA = value;
    163c:	eb e3       	ldi	r30, 0x3B	; 59
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	80 83       	st	Z, r24
    1644:	12 c0       	rjmp	.+36     	; 0x166a <controlPortValue+0x90>
						
						break;
				case PORTB:
						DIO_PORTB = value;
    1646:	e8 e3       	ldi	r30, 0x38	; 56
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	80 83       	st	Z, r24
    164e:	0d c0       	rjmp	.+26     	; 0x166a <controlPortValue+0x90>
						
						break;
				case PORTC:
						DIO_PORTC = value;
    1650:	e5 e3       	ldi	r30, 0x35	; 53
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	80 83       	st	Z, r24
    1658:	08 c0       	rjmp	.+16     	; 0x166a <controlPortValue+0x90>
						
						break;
				case PORTD:
						DIO_PORTD = value;
    165a:	e2 e3       	ldi	r30, 0x32	; 50
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	80 83       	st	Z, r24
    1662:	03 c0       	rjmp	.+6      	; 0x166a <controlPortValue+0x90>
						
						break;
				default : loc_variable = E_NOK;
    1664:	19 82       	std	Y+1, r1	; 0x01
    1666:	01 c0       	rjmp	.+2      	; 0x166a <controlPortValue+0x90>
		}
	}
	else 
	{
		 loc_variable = E_NOK;
    1668:	19 82       	std	Y+1, r1	; 0x01
	}
return loc_variable;
    166a:	89 81       	ldd	r24, Y+1	; 0x01
}
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	cf 91       	pop	r28
    1678:	df 91       	pop	r29
    167a:	08 95       	ret

0000167c <set_high>:
extern uint8 blincking;
extern uint8 delay_flag;
extern uint8 digits[4];
static void (*Plincking_delay)(void) = NULL;

void set_high(){
    167c:	df 93       	push	r29
    167e:	cf 93       	push	r28
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
	setpinvalue(seg_select_port0, seg_select_pin0, HIGH);
    1684:	82 e0       	ldi	r24, 0x02	; 2
    1686:	66 e0       	ldi	r22, 0x06	; 6
    1688:	41 e0       	ldi	r20, 0x01	; 1
    168a:	0e 94 4c 08 	call	0x1098	; 0x1098 <setpinvalue>
	setpinvalue(seg_select_port0, seg_select_pin1, HIGH);
    168e:	82 e0       	ldi	r24, 0x02	; 2
    1690:	65 e0       	ldi	r22, 0x05	; 5
    1692:	41 e0       	ldi	r20, 0x01	; 1
    1694:	0e 94 4c 08 	call	0x1098	; 0x1098 <setpinvalue>
	setpinvalue(seg_select_port1, seg_select_pin2, HIGH);
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	62 e0       	ldi	r22, 0x02	; 2
    169c:	41 e0       	ldi	r20, 0x01	; 1
    169e:	0e 94 4c 08 	call	0x1098	; 0x1098 <setpinvalue>
	setpinvalue(seg_select_port1, seg_select_pin3, HIGH);
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	63 e0       	ldi	r22, 0x03	; 3
    16a6:	41 e0       	ldi	r20, 0x01	; 1
    16a8:	0e 94 4c 08 	call	0x1098	; 0x1098 <setpinvalue>
}
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <init_7seg>:

void init_7seg(){
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	cd b7       	in	r28, 0x3d	; 61
    16b8:	de b7       	in	r29, 0x3e	; 62
	SETPINDIrection(seg_port, seg_pin0, PIN_OUTPUT);
    16ba:	82 e0       	ldi	r24, 0x02	; 2
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	41 e0       	ldi	r20, 0x01	; 1
    16c0:	0e 94 21 07 	call	0xe42	; 0xe42 <SETPINDIrection>
	SETPINDIrection(seg_port, seg_pin1, PIN_OUTPUT);
    16c4:	82 e0       	ldi	r24, 0x02	; 2
    16c6:	61 e0       	ldi	r22, 0x01	; 1
    16c8:	41 e0       	ldi	r20, 0x01	; 1
    16ca:	0e 94 21 07 	call	0xe42	; 0xe42 <SETPINDIrection>
	SETPINDIrection(seg_port, seg_pin2, PIN_OUTPUT);
    16ce:	82 e0       	ldi	r24, 0x02	; 2
    16d0:	62 e0       	ldi	r22, 0x02	; 2
    16d2:	41 e0       	ldi	r20, 0x01	; 1
    16d4:	0e 94 21 07 	call	0xe42	; 0xe42 <SETPINDIrection>
	SETPINDIrection(seg_port, seg_pin3, PIN_OUTPUT);
    16d8:	82 e0       	ldi	r24, 0x02	; 2
    16da:	64 e0       	ldi	r22, 0x04	; 4
    16dc:	41 e0       	ldi	r20, 0x01	; 1
    16de:	0e 94 21 07 	call	0xe42	; 0xe42 <SETPINDIrection>

	SETPINDIrection(seg_select_port0, seg_select_pin0, PIN_OUTPUT);
    16e2:	82 e0       	ldi	r24, 0x02	; 2
    16e4:	66 e0       	ldi	r22, 0x06	; 6
    16e6:	41 e0       	ldi	r20, 0x01	; 1
    16e8:	0e 94 21 07 	call	0xe42	; 0xe42 <SETPINDIrection>
	SETPINDIrection(seg_select_port0, seg_select_pin1, PIN_OUTPUT);
    16ec:	82 e0       	ldi	r24, 0x02	; 2
    16ee:	65 e0       	ldi	r22, 0x05	; 5
    16f0:	41 e0       	ldi	r20, 0x01	; 1
    16f2:	0e 94 21 07 	call	0xe42	; 0xe42 <SETPINDIrection>
	SETPINDIrection(seg_select_port1, seg_select_pin2, PIN_OUTPUT);
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	62 e0       	ldi	r22, 0x02	; 2
    16fa:	41 e0       	ldi	r20, 0x01	; 1
    16fc:	0e 94 21 07 	call	0xe42	; 0xe42 <SETPINDIrection>
	SETPINDIrection(seg_select_port1, seg_select_pin3, PIN_OUTPUT);
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	63 e0       	ldi	r22, 0x03	; 3
    1704:	41 e0       	ldi	r20, 0x01	; 1
    1706:	0e 94 21 07 	call	0xe42	; 0xe42 <SETPINDIrection>

	SETPINDIrection(DP_PORT, DP_PIN, PIN_OUTPUT);
    170a:	84 e0       	ldi	r24, 0x04	; 4
    170c:	64 e0       	ldi	r22, 0x04	; 4
    170e:	41 e0       	ldi	r20, 0x01	; 1
    1710:	0e 94 21 07 	call	0xe42	; 0xe42 <SETPINDIrection>

	set_high();
    1714:	0e 94 3e 0b 	call	0x167c	; 0x167c <set_high>
}
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <light_number>:

void light_number(uint8 b0, uint8 b1, uint8 b2, uint8 b3, uint8 sb0, uint8 sb1, uint8 sb2, uint8 sb3){
    171e:	af 92       	push	r10
    1720:	cf 92       	push	r12
    1722:	ef 92       	push	r14
    1724:	0f 93       	push	r16
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	28 97       	sbiw	r28, 0x08	; 8
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
    173a:	89 83       	std	Y+1, r24	; 0x01
    173c:	6a 83       	std	Y+2, r22	; 0x02
    173e:	4b 83       	std	Y+3, r20	; 0x03
    1740:	2c 83       	std	Y+4, r18	; 0x04
    1742:	0d 83       	std	Y+5, r16	; 0x05
    1744:	ee 82       	std	Y+6, r14	; 0x06
    1746:	cf 82       	std	Y+7, r12	; 0x07
    1748:	a8 86       	std	Y+8, r10	; 0x08

	setpinvalue(seg_select_port0, seg_select_pin0, sb0);
    174a:	82 e0       	ldi	r24, 0x02	; 2
    174c:	66 e0       	ldi	r22, 0x06	; 6
    174e:	4d 81       	ldd	r20, Y+5	; 0x05
    1750:	0e 94 4c 08 	call	0x1098	; 0x1098 <setpinvalue>
	setpinvalue(seg_select_port0, seg_select_pin1, sb1);
    1754:	82 e0       	ldi	r24, 0x02	; 2
    1756:	65 e0       	ldi	r22, 0x05	; 5
    1758:	4e 81       	ldd	r20, Y+6	; 0x06
    175a:	0e 94 4c 08 	call	0x1098	; 0x1098 <setpinvalue>
	setpinvalue(seg_select_port1, seg_select_pin2, sb2);
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	62 e0       	ldi	r22, 0x02	; 2
    1762:	4f 81       	ldd	r20, Y+7	; 0x07
    1764:	0e 94 4c 08 	call	0x1098	; 0x1098 <setpinvalue>
	setpinvalue(seg_select_port1, seg_select_pin3, sb3);
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	63 e0       	ldi	r22, 0x03	; 3
    176c:	48 85       	ldd	r20, Y+8	; 0x08
    176e:	0e 94 4c 08 	call	0x1098	; 0x1098 <setpinvalue>

	setpinvalue(seg_port, seg_pin0, b0);
    1772:	82 e0       	ldi	r24, 0x02	; 2
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	49 81       	ldd	r20, Y+1	; 0x01
    1778:	0e 94 4c 08 	call	0x1098	; 0x1098 <setpinvalue>
	setpinvalue(seg_port, seg_pin1, b1);
    177c:	82 e0       	ldi	r24, 0x02	; 2
    177e:	61 e0       	ldi	r22, 0x01	; 1
    1780:	4a 81       	ldd	r20, Y+2	; 0x02
    1782:	0e 94 4c 08 	call	0x1098	; 0x1098 <setpinvalue>
	setpinvalue(seg_port, seg_pin2, b2);
    1786:	82 e0       	ldi	r24, 0x02	; 2
    1788:	62 e0       	ldi	r22, 0x02	; 2
    178a:	4b 81       	ldd	r20, Y+3	; 0x03
    178c:	0e 94 4c 08 	call	0x1098	; 0x1098 <setpinvalue>
	setpinvalue(seg_port, seg_pin3, b3);
    1790:	82 e0       	ldi	r24, 0x02	; 2
    1792:	64 e0       	ldi	r22, 0x04	; 4
    1794:	4c 81       	ldd	r20, Y+4	; 0x04
    1796:	0e 94 4c 08 	call	0x1098	; 0x1098 <setpinvalue>
}
    179a:	28 96       	adiw	r28, 0x08	; 8
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	f8 94       	cli
    17a0:	de bf       	out	0x3e, r29	; 62
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	cd bf       	out	0x3d, r28	; 61
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	0f 91       	pop	r16
    17ac:	ef 90       	pop	r14
    17ae:	cf 90       	pop	r12
    17b0:	af 90       	pop	r10
    17b2:	08 95       	ret

000017b4 <set_val>:

void set_val(uint8 b0, uint8 b1, uint8 b2, uint8 b3, uint8 sb0, uint8 sb1, uint8 sb2, uint8 sb3){
    17b4:	af 92       	push	r10
    17b6:	cf 92       	push	r12
    17b8:	ef 92       	push	r14
    17ba:	0f 93       	push	r16
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	28 97       	sbiw	r28, 0x08	; 8
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	f8 94       	cli
    17ca:	de bf       	out	0x3e, r29	; 62
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	cd bf       	out	0x3d, r28	; 61
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	6a 83       	std	Y+2, r22	; 0x02
    17d4:	4b 83       	std	Y+3, r20	; 0x03
    17d6:	2c 83       	std	Y+4, r18	; 0x04
    17d8:	0d 83       	std	Y+5, r16	; 0x05
    17da:	ee 82       	std	Y+6, r14	; 0x06
    17dc:	cf 82       	std	Y+7, r12	; 0x07
    17de:	a8 86       	std	Y+8, r10	; 0x08

	// checking if i'm printing on a segment that is supposed to be plincking, if so did the delay end, so i can print the number
	if(blincking == 1 && !(sb0 && sb1) && delay_flag){
    17e0:	80 91 83 00 	lds	r24, 0x0083
    17e4:	81 30       	cpi	r24, 0x01	; 1
    17e6:	a9 f4       	brne	.+42     	; 0x1812 <set_val+0x5e>
    17e8:	8d 81       	ldd	r24, Y+5	; 0x05
    17ea:	88 23       	and	r24, r24
    17ec:	19 f0       	breq	.+6      	; 0x17f4 <set_val+0x40>
    17ee:	8e 81       	ldd	r24, Y+6	; 0x06
    17f0:	88 23       	and	r24, r24
    17f2:	79 f4       	brne	.+30     	; 0x1812 <set_val+0x5e>
    17f4:	80 91 6f 00 	lds	r24, 0x006F
    17f8:	88 23       	and	r24, r24
    17fa:	59 f0       	breq	.+22     	; 0x1812 <set_val+0x5e>
		light_number(b0, b1, b2, b3, sb0, sb1, sb2, sb3);
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	6a 81       	ldd	r22, Y+2	; 0x02
    1800:	4b 81       	ldd	r20, Y+3	; 0x03
    1802:	2c 81       	ldd	r18, Y+4	; 0x04
    1804:	0d 81       	ldd	r16, Y+5	; 0x05
    1806:	ee 80       	ldd	r14, Y+6	; 0x06
    1808:	cf 80       	ldd	r12, Y+7	; 0x07
    180a:	a8 84       	ldd	r10, Y+8	; 0x08
    180c:	0e 94 8f 0b 	call	0x171e	; 0x171e <light_number>
    1810:	51 c0       	rjmp	.+162    	; 0x18b4 <set_val+0x100>
	}

	else if(blincking == 2 && !(sb2 && sb3) && delay_flag){
    1812:	80 91 83 00 	lds	r24, 0x0083
    1816:	82 30       	cpi	r24, 0x02	; 2
    1818:	a9 f4       	brne	.+42     	; 0x1844 <set_val+0x90>
    181a:	8f 81       	ldd	r24, Y+7	; 0x07
    181c:	88 23       	and	r24, r24
    181e:	19 f0       	breq	.+6      	; 0x1826 <set_val+0x72>
    1820:	88 85       	ldd	r24, Y+8	; 0x08
    1822:	88 23       	and	r24, r24
    1824:	79 f4       	brne	.+30     	; 0x1844 <set_val+0x90>
    1826:	80 91 6f 00 	lds	r24, 0x006F
    182a:	88 23       	and	r24, r24
    182c:	59 f0       	breq	.+22     	; 0x1844 <set_val+0x90>
		light_number(b0, b1, b2, b3, sb0, sb1, sb2, sb3);
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	6a 81       	ldd	r22, Y+2	; 0x02
    1832:	4b 81       	ldd	r20, Y+3	; 0x03
    1834:	2c 81       	ldd	r18, Y+4	; 0x04
    1836:	0d 81       	ldd	r16, Y+5	; 0x05
    1838:	ee 80       	ldd	r14, Y+6	; 0x06
    183a:	cf 80       	ldd	r12, Y+7	; 0x07
    183c:	a8 84       	ldd	r10, Y+8	; 0x08
    183e:	0e 94 8f 0b 	call	0x171e	; 0x171e <light_number>
    1842:	38 c0       	rjmp	.+112    	; 0x18b4 <set_val+0x100>
	}

	else if (blincking == 1 && (sb0 && sb1)){
    1844:	80 91 83 00 	lds	r24, 0x0083
    1848:	81 30       	cpi	r24, 0x01	; 1
    184a:	89 f4       	brne	.+34     	; 0x186e <set_val+0xba>
    184c:	8d 81       	ldd	r24, Y+5	; 0x05
    184e:	88 23       	and	r24, r24
    1850:	71 f0       	breq	.+28     	; 0x186e <set_val+0xba>
    1852:	8e 81       	ldd	r24, Y+6	; 0x06
    1854:	88 23       	and	r24, r24
    1856:	59 f0       	breq	.+22     	; 0x186e <set_val+0xba>
		light_number(b0, b1, b2, b3, sb0, sb1, sb2, sb3);
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	6a 81       	ldd	r22, Y+2	; 0x02
    185c:	4b 81       	ldd	r20, Y+3	; 0x03
    185e:	2c 81       	ldd	r18, Y+4	; 0x04
    1860:	0d 81       	ldd	r16, Y+5	; 0x05
    1862:	ee 80       	ldd	r14, Y+6	; 0x06
    1864:	cf 80       	ldd	r12, Y+7	; 0x07
    1866:	a8 84       	ldd	r10, Y+8	; 0x08
    1868:	0e 94 8f 0b 	call	0x171e	; 0x171e <light_number>
    186c:	23 c0       	rjmp	.+70     	; 0x18b4 <set_val+0x100>
	}
	else if(blincking == 2 && (sb2 && sb3)){
    186e:	80 91 83 00 	lds	r24, 0x0083
    1872:	82 30       	cpi	r24, 0x02	; 2
    1874:	89 f4       	brne	.+34     	; 0x1898 <set_val+0xe4>
    1876:	8f 81       	ldd	r24, Y+7	; 0x07
    1878:	88 23       	and	r24, r24
    187a:	71 f0       	breq	.+28     	; 0x1898 <set_val+0xe4>
    187c:	88 85       	ldd	r24, Y+8	; 0x08
    187e:	88 23       	and	r24, r24
    1880:	59 f0       	breq	.+22     	; 0x1898 <set_val+0xe4>
		light_number(b0, b1, b2, b3, sb0, sb1, sb2, sb3);
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	6a 81       	ldd	r22, Y+2	; 0x02
    1886:	4b 81       	ldd	r20, Y+3	; 0x03
    1888:	2c 81       	ldd	r18, Y+4	; 0x04
    188a:	0d 81       	ldd	r16, Y+5	; 0x05
    188c:	ee 80       	ldd	r14, Y+6	; 0x06
    188e:	cf 80       	ldd	r12, Y+7	; 0x07
    1890:	a8 84       	ldd	r10, Y+8	; 0x08
    1892:	0e 94 8f 0b 	call	0x171e	; 0x171e <light_number>
    1896:	0e c0       	rjmp	.+28     	; 0x18b4 <set_val+0x100>
	}
	else if(blincking == 0){
    1898:	80 91 83 00 	lds	r24, 0x0083
    189c:	88 23       	and	r24, r24
    189e:	51 f4       	brne	.+20     	; 0x18b4 <set_val+0x100>
		light_number(b0, b1, b2, b3, sb0, sb1, sb2, sb3);
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	6a 81       	ldd	r22, Y+2	; 0x02
    18a4:	4b 81       	ldd	r20, Y+3	; 0x03
    18a6:	2c 81       	ldd	r18, Y+4	; 0x04
    18a8:	0d 81       	ldd	r16, Y+5	; 0x05
    18aa:	ee 80       	ldd	r14, Y+6	; 0x06
    18ac:	cf 80       	ldd	r12, Y+7	; 0x07
    18ae:	a8 84       	ldd	r10, Y+8	; 0x08
    18b0:	0e 94 8f 0b 	call	0x171e	; 0x171e <light_number>
	}
}
    18b4:	28 96       	adiw	r28, 0x08	; 8
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	f8 94       	cli
    18ba:	de bf       	out	0x3e, r29	; 62
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	cd bf       	out	0x3d, r28	; 61
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	0f 91       	pop	r16
    18c6:	ef 90       	pop	r14
    18c8:	cf 90       	pop	r12
    18ca:	af 90       	pop	r10
    18cc:	08 95       	ret

000018ce <seg_print_val>:

ERROR_status seg_print_val(uint8 val, uint8 id){
    18ce:	af 92       	push	r10
    18d0:	cf 92       	push	r12
    18d2:	ef 92       	push	r14
    18d4:	0f 93       	push	r16
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	cd b7       	in	r28, 0x3d	; 61
    18dc:	de b7       	in	r29, 0x3e	; 62
    18de:	2f 97       	sbiw	r28, 0x0f	; 15
    18e0:	0f b6       	in	r0, 0x3f	; 63
    18e2:	f8 94       	cli
    18e4:	de bf       	out	0x3e, r29	; 62
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	cd bf       	out	0x3d, r28	; 61
    18ea:	8a 87       	std	Y+10, r24	; 0x0a
    18ec:	6b 87       	std	Y+11, r22	; 0x0b
	ERROR_status er = E_OK;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	89 87       	std	Y+9, r24	; 0x09
	uint8 b0 = 0, b1 = 0, b2 = 0, b3 = 0, sb0 = 1, sb1 = 1, sb2 = 1, sb3 = 1;
    18f2:	18 86       	std	Y+8, r1	; 0x08
    18f4:	1f 82       	std	Y+7, r1	; 0x07
    18f6:	1e 82       	std	Y+6, r1	; 0x06
    18f8:	1d 82       	std	Y+5, r1	; 0x05
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	8c 83       	std	Y+4, r24	; 0x04
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	8b 83       	std	Y+3, r24	; 0x03
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	8a 83       	std	Y+2, r24	; 0x02
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	89 83       	std	Y+1, r24	; 0x01
	switch (val){
    190a:	8a 85       	ldd	r24, Y+10	; 0x0a
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	3f 87       	std	Y+15, r19	; 0x0f
    1912:	2e 87       	std	Y+14, r18	; 0x0e
    1914:	8e 85       	ldd	r24, Y+14	; 0x0e
    1916:	9f 85       	ldd	r25, Y+15	; 0x0f
    1918:	84 30       	cpi	r24, 0x04	; 4
    191a:	91 05       	cpc	r25, r1
    191c:	09 f4       	brne	.+2      	; 0x1920 <seg_print_val+0x52>
    191e:	4b c0       	rjmp	.+150    	; 0x19b6 <seg_print_val+0xe8>
    1920:	2e 85       	ldd	r18, Y+14	; 0x0e
    1922:	3f 85       	ldd	r19, Y+15	; 0x0f
    1924:	25 30       	cpi	r18, 0x05	; 5
    1926:	31 05       	cpc	r19, r1
    1928:	dc f4       	brge	.+54     	; 0x1960 <seg_print_val+0x92>
    192a:	8e 85       	ldd	r24, Y+14	; 0x0e
    192c:	9f 85       	ldd	r25, Y+15	; 0x0f
    192e:	81 30       	cpi	r24, 0x01	; 1
    1930:	91 05       	cpc	r25, r1
    1932:	b1 f1       	breq	.+108    	; 0x19a0 <seg_print_val+0xd2>
    1934:	2e 85       	ldd	r18, Y+14	; 0x0e
    1936:	3f 85       	ldd	r19, Y+15	; 0x0f
    1938:	22 30       	cpi	r18, 0x02	; 2
    193a:	31 05       	cpc	r19, r1
    193c:	34 f4       	brge	.+12     	; 0x194a <seg_print_val+0x7c>
    193e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1940:	9f 85       	ldd	r25, Y+15	; 0x0f
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	09 f4       	brne	.+2      	; 0x1948 <seg_print_val+0x7a>
    1946:	54 c0       	rjmp	.+168    	; 0x19f0 <seg_print_val+0x122>
    1948:	52 c0       	rjmp	.+164    	; 0x19ee <seg_print_val+0x120>
    194a:	2e 85       	ldd	r18, Y+14	; 0x0e
    194c:	3f 85       	ldd	r19, Y+15	; 0x0f
    194e:	22 30       	cpi	r18, 0x02	; 2
    1950:	31 05       	cpc	r19, r1
    1952:	49 f1       	breq	.+82     	; 0x19a6 <seg_print_val+0xd8>
    1954:	8e 85       	ldd	r24, Y+14	; 0x0e
    1956:	9f 85       	ldd	r25, Y+15	; 0x0f
    1958:	83 30       	cpi	r24, 0x03	; 3
    195a:	91 05       	cpc	r25, r1
    195c:	39 f1       	breq	.+78     	; 0x19ac <seg_print_val+0xde>
    195e:	47 c0       	rjmp	.+142    	; 0x19ee <seg_print_val+0x120>
    1960:	2e 85       	ldd	r18, Y+14	; 0x0e
    1962:	3f 85       	ldd	r19, Y+15	; 0x0f
    1964:	27 30       	cpi	r18, 0x07	; 7
    1966:	31 05       	cpc	r19, r1
    1968:	99 f1       	breq	.+102    	; 0x19d0 <seg_print_val+0x102>
    196a:	8e 85       	ldd	r24, Y+14	; 0x0e
    196c:	9f 85       	ldd	r25, Y+15	; 0x0f
    196e:	88 30       	cpi	r24, 0x08	; 8
    1970:	91 05       	cpc	r25, r1
    1972:	5c f4       	brge	.+22     	; 0x198a <seg_print_val+0xbc>
    1974:	2e 85       	ldd	r18, Y+14	; 0x0e
    1976:	3f 85       	ldd	r19, Y+15	; 0x0f
    1978:	25 30       	cpi	r18, 0x05	; 5
    197a:	31 05       	cpc	r19, r1
    197c:	f9 f0       	breq	.+62     	; 0x19bc <seg_print_val+0xee>
    197e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1980:	9f 85       	ldd	r25, Y+15	; 0x0f
    1982:	86 30       	cpi	r24, 0x06	; 6
    1984:	91 05       	cpc	r25, r1
    1986:	f9 f0       	breq	.+62     	; 0x19c6 <seg_print_val+0xf8>
    1988:	32 c0       	rjmp	.+100    	; 0x19ee <seg_print_val+0x120>
    198a:	2e 85       	ldd	r18, Y+14	; 0x0e
    198c:	3f 85       	ldd	r19, Y+15	; 0x0f
    198e:	28 30       	cpi	r18, 0x08	; 8
    1990:	31 05       	cpc	r19, r1
    1992:	29 f1       	breq	.+74     	; 0x19de <seg_print_val+0x110>
    1994:	8e 85       	ldd	r24, Y+14	; 0x0e
    1996:	9f 85       	ldd	r25, Y+15	; 0x0f
    1998:	89 30       	cpi	r24, 0x09	; 9
    199a:	91 05       	cpc	r25, r1
    199c:	19 f1       	breq	.+70     	; 0x19e4 <seg_print_val+0x116>
    199e:	27 c0       	rjmp	.+78     	; 0x19ee <seg_print_val+0x120>
	case 0:
		break;
	case 1:
		b0 = 1;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	88 87       	std	Y+8, r24	; 0x08
    19a4:	25 c0       	rjmp	.+74     	; 0x19f0 <seg_print_val+0x122>
		break;
	case 2:
		b1 = 1;
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	8f 83       	std	Y+7, r24	; 0x07
    19aa:	22 c0       	rjmp	.+68     	; 0x19f0 <seg_print_val+0x122>
		break;
	case 3:
		b1 = b0 = 1;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	88 87       	std	Y+8, r24	; 0x08
    19b0:	88 85       	ldd	r24, Y+8	; 0x08
    19b2:	8f 83       	std	Y+7, r24	; 0x07
    19b4:	1d c0       	rjmp	.+58     	; 0x19f0 <seg_print_val+0x122>
		break;
	case 4:
		b2 = 1;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	8e 83       	std	Y+6, r24	; 0x06
    19ba:	1a c0       	rjmp	.+52     	; 0x19f0 <seg_print_val+0x122>
		break;
	case 5:
		b2 = b0 = 1;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	88 87       	std	Y+8, r24	; 0x08
    19c0:	88 85       	ldd	r24, Y+8	; 0x08
    19c2:	8e 83       	std	Y+6, r24	; 0x06
    19c4:	15 c0       	rjmp	.+42     	; 0x19f0 <seg_print_val+0x122>
		break;
	case 6:
		b2 = b1 = 1;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	8f 83       	std	Y+7, r24	; 0x07
    19ca:	8f 81       	ldd	r24, Y+7	; 0x07
    19cc:	8e 83       	std	Y+6, r24	; 0x06
    19ce:	10 c0       	rjmp	.+32     	; 0x19f0 <seg_print_val+0x122>
		break;
	case 7:
		b2 = b1 = b0 = 1;
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	88 87       	std	Y+8, r24	; 0x08
    19d4:	88 85       	ldd	r24, Y+8	; 0x08
    19d6:	8f 83       	std	Y+7, r24	; 0x07
    19d8:	8f 81       	ldd	r24, Y+7	; 0x07
    19da:	8e 83       	std	Y+6, r24	; 0x06
    19dc:	09 c0       	rjmp	.+18     	; 0x19f0 <seg_print_val+0x122>
		break;
	case 8:
		b3 = 1;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	8d 83       	std	Y+5, r24	; 0x05
    19e2:	06 c0       	rjmp	.+12     	; 0x19f0 <seg_print_val+0x122>
		break;
	case 9:
		b3 = b0 = 1;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	88 87       	std	Y+8, r24	; 0x08
    19e8:	88 85       	ldd	r24, Y+8	; 0x08
    19ea:	8d 83       	std	Y+5, r24	; 0x05
    19ec:	01 c0       	rjmp	.+2      	; 0x19f0 <seg_print_val+0x122>
		break;
	default: er = E_NOK;
    19ee:	19 86       	std	Y+9, r1	; 0x09
	}

	switch(id){
    19f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	3d 87       	std	Y+13, r19	; 0x0d
    19f8:	2c 87       	std	Y+12, r18	; 0x0c
    19fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    19fc:	9d 85       	ldd	r25, Y+13	; 0x0d
    19fe:	81 30       	cpi	r24, 0x01	; 1
    1a00:	91 05       	cpc	r25, r1
    1a02:	b9 f0       	breq	.+46     	; 0x1a32 <seg_print_val+0x164>
    1a04:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a06:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a08:	22 30       	cpi	r18, 0x02	; 2
    1a0a:	31 05       	cpc	r19, r1
    1a0c:	2c f4       	brge	.+10     	; 0x1a18 <seg_print_val+0x14a>
    1a0e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a10:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	61 f0       	breq	.+24     	; 0x1a2e <seg_print_val+0x160>
    1a16:	13 c0       	rjmp	.+38     	; 0x1a3e <seg_print_val+0x170>
    1a18:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a1a:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a1c:	22 30       	cpi	r18, 0x02	; 2
    1a1e:	31 05       	cpc	r19, r1
    1a20:	51 f0       	breq	.+20     	; 0x1a36 <seg_print_val+0x168>
    1a22:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a24:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a26:	83 30       	cpi	r24, 0x03	; 3
    1a28:	91 05       	cpc	r25, r1
    1a2a:	39 f0       	breq	.+14     	; 0x1a3a <seg_print_val+0x16c>
    1a2c:	08 c0       	rjmp	.+16     	; 0x1a3e <seg_print_val+0x170>
	case 0:
		sb0 = 0;
    1a2e:	1c 82       	std	Y+4, r1	; 0x04
    1a30:	07 c0       	rjmp	.+14     	; 0x1a40 <seg_print_val+0x172>
		break;
	case 1:
		sb1 = 0;
    1a32:	1b 82       	std	Y+3, r1	; 0x03
    1a34:	05 c0       	rjmp	.+10     	; 0x1a40 <seg_print_val+0x172>
		break;
	case 2:
		sb2 = 0;
    1a36:	1a 82       	std	Y+2, r1	; 0x02
    1a38:	03 c0       	rjmp	.+6      	; 0x1a40 <seg_print_val+0x172>
		break;
	case 3:
		sb3 = 0;
    1a3a:	19 82       	std	Y+1, r1	; 0x01
    1a3c:	01 c0       	rjmp	.+2      	; 0x1a40 <seg_print_val+0x172>
		break;
	default: er = E_NOK;
    1a3e:	19 86       	std	Y+9, r1	; 0x09
	}
	if(er == E_OK){
    1a40:	89 85       	ldd	r24, Y+9	; 0x09
    1a42:	81 30       	cpi	r24, 0x01	; 1
    1a44:	51 f4       	brne	.+20     	; 0x1a5a <seg_print_val+0x18c>
		set_val(b0, b1, b2, b3, sb0, sb1, sb2, sb3);
    1a46:	88 85       	ldd	r24, Y+8	; 0x08
    1a48:	6f 81       	ldd	r22, Y+7	; 0x07
    1a4a:	4e 81       	ldd	r20, Y+6	; 0x06
    1a4c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a4e:	0c 81       	ldd	r16, Y+4	; 0x04
    1a50:	eb 80       	ldd	r14, Y+3	; 0x03
    1a52:	ca 80       	ldd	r12, Y+2	; 0x02
    1a54:	a9 80       	ldd	r10, Y+1	; 0x01
    1a56:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <set_val>
	}
	return er;
    1a5a:	89 85       	ldd	r24, Y+9	; 0x09
}
    1a5c:	2f 96       	adiw	r28, 0x0f	; 15
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	de bf       	out	0x3e, r29	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	cd bf       	out	0x3d, r28	; 61
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	0f 91       	pop	r16
    1a6e:	ef 90       	pop	r14
    1a70:	cf 90       	pop	r12
    1a72:	af 90       	pop	r10
    1a74:	08 95       	ret

00001a76 <Display_clock>:

void Display_clock(){
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	6e 97       	sbiw	r28, 0x1e	; 30
    1a80:	0f b6       	in	r0, 0x3f	; 63
    1a82:	f8 94       	cli
    1a84:	de bf       	out	0x3e, r29	; 62
    1a86:	0f be       	out	0x3f, r0	; 63
    1a88:	cd bf       	out	0x3d, r28	; 61
	init_7seg();
    1a8a:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <init_7seg>
	Plincking_delay();
    1a8e:	e0 91 7d 00 	lds	r30, 0x007D
    1a92:	f0 91 7e 00 	lds	r31, 0x007E
    1a96:	09 95       	icall
	if(blincking == 1){
    1a98:	80 91 83 00 	lds	r24, 0x0083
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <Display_clock+0x2c>
    1aa0:	88 c0       	rjmp	.+272    	; 0x1bb2 <Display_clock+0x13c>
		for(uint8 i = 3; i >= 0; i--){
    1aa2:	83 e0       	ldi	r24, 0x03	; 3
    1aa4:	8e 8f       	std	Y+30, r24	; 0x1e
			seg_print_val(digits[i], i);
    1aa6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1aa8:	88 2f       	mov	r24, r24
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	fc 01       	movw	r30, r24
    1aae:	e5 59       	subi	r30, 0x95	; 149
    1ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab2:	80 81       	ld	r24, Z
    1ab4:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1ab6:	0e 94 67 0c 	call	0x18ce	; 0x18ce <seg_print_val>
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	a0 e0       	ldi	r26, 0x00	; 0
    1ac0:	b0 e4       	ldi	r27, 0x40	; 64
    1ac2:	89 8f       	std	Y+25, r24	; 0x19
    1ac4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ac6:	ab 8f       	std	Y+27, r26	; 0x1b
    1ac8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aca:	69 8d       	ldd	r22, Y+25	; 0x19
    1acc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ace:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ad0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	4a e7       	ldi	r20, 0x7A	; 122
    1ad8:	55 e4       	ldi	r21, 0x45	; 69
    1ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	8d 8b       	std	Y+21, r24	; 0x15
    1ae4:	9e 8b       	std	Y+22, r25	; 0x16
    1ae6:	af 8b       	std	Y+23, r26	; 0x17
    1ae8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1aea:	6d 89       	ldd	r22, Y+21	; 0x15
    1aec:	7e 89       	ldd	r23, Y+22	; 0x16
    1aee:	8f 89       	ldd	r24, Y+23	; 0x17
    1af0:	98 8d       	ldd	r25, Y+24	; 0x18
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e8       	ldi	r20, 0x80	; 128
    1af8:	5f e3       	ldi	r21, 0x3F	; 63
    1afa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1afe:	88 23       	and	r24, r24
    1b00:	2c f4       	brge	.+10     	; 0x1b0c <Display_clock+0x96>
		__ticks = 1;
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	9c 8b       	std	Y+20, r25	; 0x14
    1b08:	8b 8b       	std	Y+19, r24	; 0x13
    1b0a:	3f c0       	rjmp	.+126    	; 0x1b8a <Display_clock+0x114>
	else if (__tmp > 65535)
    1b0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b10:	8f 89       	ldd	r24, Y+23	; 0x17
    1b12:	98 8d       	ldd	r25, Y+24	; 0x18
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	3f ef       	ldi	r19, 0xFF	; 255
    1b18:	4f e7       	ldi	r20, 0x7F	; 127
    1b1a:	57 e4       	ldi	r21, 0x47	; 71
    1b1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b20:	18 16       	cp	r1, r24
    1b22:	4c f5       	brge	.+82     	; 0x1b76 <Display_clock+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b24:	69 8d       	ldd	r22, Y+25	; 0x19
    1b26:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b28:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b2a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e2       	ldi	r20, 0x20	; 32
    1b32:	51 e4       	ldi	r21, 0x41	; 65
    1b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	bc 01       	movw	r22, r24
    1b3e:	cd 01       	movw	r24, r26
    1b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	9c 8b       	std	Y+20, r25	; 0x14
    1b4a:	8b 8b       	std	Y+19, r24	; 0x13
    1b4c:	0f c0       	rjmp	.+30     	; 0x1b6c <Display_clock+0xf6>
    1b4e:	80 e9       	ldi	r24, 0x90	; 144
    1b50:	91 e0       	ldi	r25, 0x01	; 1
    1b52:	9a 8b       	std	Y+18, r25	; 0x12
    1b54:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b56:	89 89       	ldd	r24, Y+17	; 0x11
    1b58:	9a 89       	ldd	r25, Y+18	; 0x12
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <Display_clock+0xe4>
    1b5e:	9a 8b       	std	Y+18, r25	; 0x12
    1b60:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b62:	8b 89       	ldd	r24, Y+19	; 0x13
    1b64:	9c 89       	ldd	r25, Y+20	; 0x14
    1b66:	01 97       	sbiw	r24, 0x01	; 1
    1b68:	9c 8b       	std	Y+20, r25	; 0x14
    1b6a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b70:	00 97       	sbiw	r24, 0x00	; 0
    1b72:	69 f7       	brne	.-38     	; 0x1b4e <Display_clock+0xd8>
    1b74:	14 c0       	rjmp	.+40     	; 0x1b9e <Display_clock+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b76:	6d 89       	ldd	r22, Y+21	; 0x15
    1b78:	7e 89       	ldd	r23, Y+22	; 0x16
    1b7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	9c 8b       	std	Y+20, r25	; 0x14
    1b88:	8b 8b       	std	Y+19, r24	; 0x13
    1b8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8e:	98 8b       	std	Y+16, r25	; 0x10
    1b90:	8f 87       	std	Y+15, r24	; 0x0f
    1b92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b94:	98 89       	ldd	r25, Y+16	; 0x10
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	f1 f7       	brne	.-4      	; 0x1b96 <Display_clock+0x120>
    1b9a:	98 8b       	std	Y+16, r25	; 0x10
    1b9c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2);
			set_high();
    1b9e:	0e 94 3e 0b 	call	0x167c	; 0x167c <set_high>
			if(i == 0) break;
    1ba2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ba4:	88 23       	and	r24, r24
    1ba6:	09 f4       	brne	.+2      	; 0x1baa <Display_clock+0x134>
    1ba8:	8b c0       	rjmp	.+278    	; 0x1cc0 <Display_clock+0x24a>

void Display_clock(){
	init_7seg();
	Plincking_delay();
	if(blincking == 1){
		for(uint8 i = 3; i >= 0; i--){
    1baa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bac:	81 50       	subi	r24, 0x01	; 1
    1bae:	8e 8f       	std	Y+30, r24	; 0x1e
    1bb0:	7a cf       	rjmp	.-268    	; 0x1aa6 <Display_clock+0x30>
			set_high();
			if(i == 0) break;
		}
	}
	else{
		for(uint8 i = 0; i < 4; i++){
    1bb2:	1d 8e       	std	Y+29, r1	; 0x1d
    1bb4:	81 c0       	rjmp	.+258    	; 0x1cb8 <Display_clock+0x242>
			seg_print_val(digits[i], i);
    1bb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bb8:	88 2f       	mov	r24, r24
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	e5 59       	subi	r30, 0x95	; 149
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	80 81       	ld	r24, Z
    1bc4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1bc6:	0e 94 67 0c 	call	0x18ce	; 0x18ce <seg_print_val>
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	a0 e0       	ldi	r26, 0x00	; 0
    1bd0:	b0 e4       	ldi	r27, 0x40	; 64
    1bd2:	8b 87       	std	Y+11, r24	; 0x0b
    1bd4:	9c 87       	std	Y+12, r25	; 0x0c
    1bd6:	ad 87       	std	Y+13, r26	; 0x0d
    1bd8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1be0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	4a e7       	ldi	r20, 0x7A	; 122
    1be8:	55 e4       	ldi	r21, 0x45	; 69
    1bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	8f 83       	std	Y+7, r24	; 0x07
    1bf4:	98 87       	std	Y+8, r25	; 0x08
    1bf6:	a9 87       	std	Y+9, r26	; 0x09
    1bf8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1bfc:	78 85       	ldd	r23, Y+8	; 0x08
    1bfe:	89 85       	ldd	r24, Y+9	; 0x09
    1c00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e8       	ldi	r20, 0x80	; 128
    1c08:	5f e3       	ldi	r21, 0x3F	; 63
    1c0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c0e:	88 23       	and	r24, r24
    1c10:	2c f4       	brge	.+10     	; 0x1c1c <Display_clock+0x1a6>
		__ticks = 1;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	9e 83       	std	Y+6, r25	; 0x06
    1c18:	8d 83       	std	Y+5, r24	; 0x05
    1c1a:	3f c0       	rjmp	.+126    	; 0x1c9a <Display_clock+0x224>
	else if (__tmp > 65535)
    1c1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1e:	78 85       	ldd	r23, Y+8	; 0x08
    1c20:	89 85       	ldd	r24, Y+9	; 0x09
    1c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	3f ef       	ldi	r19, 0xFF	; 255
    1c28:	4f e7       	ldi	r20, 0x7F	; 127
    1c2a:	57 e4       	ldi	r21, 0x47	; 71
    1c2c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c30:	18 16       	cp	r1, r24
    1c32:	4c f5       	brge	.+82     	; 0x1c86 <Display_clock+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c34:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c36:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c38:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e2       	ldi	r20, 0x20	; 32
    1c42:	51 e4       	ldi	r21, 0x41	; 65
    1c44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	bc 01       	movw	r22, r24
    1c4e:	cd 01       	movw	r24, r26
    1c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	9e 83       	std	Y+6, r25	; 0x06
    1c5a:	8d 83       	std	Y+5, r24	; 0x05
    1c5c:	0f c0       	rjmp	.+30     	; 0x1c7c <Display_clock+0x206>
    1c5e:	80 e9       	ldi	r24, 0x90	; 144
    1c60:	91 e0       	ldi	r25, 0x01	; 1
    1c62:	9c 83       	std	Y+4, r25	; 0x04
    1c64:	8b 83       	std	Y+3, r24	; 0x03
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <Display_clock+0x1f4>
    1c6e:	9c 83       	std	Y+4, r25	; 0x04
    1c70:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c72:	8d 81       	ldd	r24, Y+5	; 0x05
    1c74:	9e 81       	ldd	r25, Y+6	; 0x06
    1c76:	01 97       	sbiw	r24, 0x01	; 1
    1c78:	9e 83       	std	Y+6, r25	; 0x06
    1c7a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c80:	00 97       	sbiw	r24, 0x00	; 0
    1c82:	69 f7       	brne	.-38     	; 0x1c5e <Display_clock+0x1e8>
    1c84:	14 c0       	rjmp	.+40     	; 0x1cae <Display_clock+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c86:	6f 81       	ldd	r22, Y+7	; 0x07
    1c88:	78 85       	ldd	r23, Y+8	; 0x08
    1c8a:	89 85       	ldd	r24, Y+9	; 0x09
    1c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	9e 83       	std	Y+6, r25	; 0x06
    1c98:	8d 83       	std	Y+5, r24	; 0x05
    1c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9e:	9a 83       	std	Y+2, r25	; 0x02
    1ca0:	89 83       	std	Y+1, r24	; 0x01
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	f1 f7       	brne	.-4      	; 0x1ca6 <Display_clock+0x230>
    1caa:	9a 83       	std	Y+2, r25	; 0x02
    1cac:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2);
			set_high();
    1cae:	0e 94 3e 0b 	call	0x167c	; 0x167c <set_high>
			set_high();
			if(i == 0) break;
		}
	}
	else{
		for(uint8 i = 0; i < 4; i++){
    1cb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cb4:	8f 5f       	subi	r24, 0xFF	; 255
    1cb6:	8d 8f       	std	Y+29, r24	; 0x1d
    1cb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cba:	84 30       	cpi	r24, 0x04	; 4
    1cbc:	08 f4       	brcc	.+2      	; 0x1cc0 <Display_clock+0x24a>
    1cbe:	7b cf       	rjmp	.-266    	; 0x1bb6 <Display_clock+0x140>
			seg_print_val(digits[i], i);
			_delay_ms(2);
			set_high();
		}
	}
}
    1cc0:	6e 96       	adiw	r28, 0x1e	; 30
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	de bf       	out	0x3e, r29	; 62
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	cd bf       	out	0x3d, r28	; 61
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	08 95       	ret

00001cd2 <inc_mins>:

void inc_mins(){
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
	if(digits[2] == 5 && digits[3] == 9){
    1cda:	80 91 6d 00 	lds	r24, 0x006D
    1cde:	85 30       	cpi	r24, 0x05	; 5
    1ce0:	59 f4       	brne	.+22     	; 0x1cf8 <inc_mins+0x26>
    1ce2:	80 91 6e 00 	lds	r24, 0x006E
    1ce6:	89 30       	cpi	r24, 0x09	; 9
    1ce8:	39 f4       	brne	.+14     	; 0x1cf8 <inc_mins+0x26>
		digits[2] = digits[3] = 0;
    1cea:	10 92 6e 00 	sts	0x006E, r1
    1cee:	80 91 6e 00 	lds	r24, 0x006E
    1cf2:	80 93 6d 00 	sts	0x006D, r24
    1cf6:	11 c0       	rjmp	.+34     	; 0x1d1a <inc_mins+0x48>
	}
	else if(digits[3] == 9){
    1cf8:	80 91 6e 00 	lds	r24, 0x006E
    1cfc:	89 30       	cpi	r24, 0x09	; 9
    1cfe:	41 f4       	brne	.+16     	; 0x1d10 <inc_mins+0x3e>
		digits[2]++;
    1d00:	80 91 6d 00 	lds	r24, 0x006D
    1d04:	8f 5f       	subi	r24, 0xFF	; 255
    1d06:	80 93 6d 00 	sts	0x006D, r24
		digits[3] = 0;
    1d0a:	10 92 6e 00 	sts	0x006E, r1
    1d0e:	05 c0       	rjmp	.+10     	; 0x1d1a <inc_mins+0x48>
	}
	else{
		digits[3]++;
    1d10:	80 91 6e 00 	lds	r24, 0x006E
    1d14:	8f 5f       	subi	r24, 0xFF	; 255
    1d16:	80 93 6e 00 	sts	0x006E, r24
	}
}
    1d1a:	cf 91       	pop	r28
    1d1c:	df 91       	pop	r29
    1d1e:	08 95       	ret

00001d20 <inc_clock>:
//                  0  1  2  3
//uint8 digits[] = {2, 3, 5, 9};
void inc_clock(){
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
	if(digits[2] == 5 && digits[3] == 9){
    1d28:	80 91 6d 00 	lds	r24, 0x006D
    1d2c:	85 30       	cpi	r24, 0x05	; 5
    1d2e:	09 f0       	breq	.+2      	; 0x1d32 <inc_clock+0x12>
    1d30:	4c c0       	rjmp	.+152    	; 0x1dca <inc_clock+0xaa>
    1d32:	80 91 6e 00 	lds	r24, 0x006E
    1d36:	89 30       	cpi	r24, 0x09	; 9
    1d38:	09 f0       	breq	.+2      	; 0x1d3c <inc_clock+0x1c>
    1d3a:	47 c0       	rjmp	.+142    	; 0x1dca <inc_clock+0xaa>
		if(digits[0] == 2 && digits[1] == 3){
    1d3c:	80 91 6b 00 	lds	r24, 0x006B
    1d40:	82 30       	cpi	r24, 0x02	; 2
    1d42:	99 f4       	brne	.+38     	; 0x1d6a <inc_clock+0x4a>
    1d44:	80 91 6c 00 	lds	r24, 0x006C
    1d48:	83 30       	cpi	r24, 0x03	; 3
    1d4a:	79 f4       	brne	.+30     	; 0x1d6a <inc_clock+0x4a>
			digits[0] = digits[1] = digits[2] = digits[3] = 0;
    1d4c:	10 92 6e 00 	sts	0x006E, r1
    1d50:	80 91 6e 00 	lds	r24, 0x006E
    1d54:	80 93 6d 00 	sts	0x006D, r24
    1d58:	80 91 6d 00 	lds	r24, 0x006D
    1d5c:	80 93 6c 00 	sts	0x006C, r24
    1d60:	80 91 6c 00 	lds	r24, 0x006C
    1d64:	80 93 6b 00 	sts	0x006B, r24
    1d68:	41 c0       	rjmp	.+130    	; 0x1dec <inc_clock+0xcc>
		}
		else if(digits[0] == 2){
    1d6a:	80 91 6b 00 	lds	r24, 0x006B
    1d6e:	82 30       	cpi	r24, 0x02	; 2
    1d70:	61 f4       	brne	.+24     	; 0x1d8a <inc_clock+0x6a>
			digits[1]++;
    1d72:	80 91 6c 00 	lds	r24, 0x006C
    1d76:	8f 5f       	subi	r24, 0xFF	; 255
    1d78:	80 93 6c 00 	sts	0x006C, r24
			digits[2] = digits[3] = 0;
    1d7c:	10 92 6e 00 	sts	0x006E, r1
    1d80:	80 91 6e 00 	lds	r24, 0x006E
    1d84:	80 93 6d 00 	sts	0x006D, r24
    1d88:	31 c0       	rjmp	.+98     	; 0x1dec <inc_clock+0xcc>
		}
		else if(digits[1] == 9){
    1d8a:	80 91 6c 00 	lds	r24, 0x006C
    1d8e:	89 30       	cpi	r24, 0x09	; 9
    1d90:	81 f4       	brne	.+32     	; 0x1db2 <inc_clock+0x92>
			digits[0]++;
    1d92:	80 91 6b 00 	lds	r24, 0x006B
    1d96:	8f 5f       	subi	r24, 0xFF	; 255
    1d98:	80 93 6b 00 	sts	0x006B, r24
			digits[2] = digits[1] = digits[3] = 0;
    1d9c:	10 92 6e 00 	sts	0x006E, r1
    1da0:	80 91 6e 00 	lds	r24, 0x006E
    1da4:	80 93 6c 00 	sts	0x006C, r24
    1da8:	80 91 6c 00 	lds	r24, 0x006C
    1dac:	80 93 6d 00 	sts	0x006D, r24
    1db0:	1d c0       	rjmp	.+58     	; 0x1dec <inc_clock+0xcc>
		}
		else{
			digits[1]++;
    1db2:	80 91 6c 00 	lds	r24, 0x006C
    1db6:	8f 5f       	subi	r24, 0xFF	; 255
    1db8:	80 93 6c 00 	sts	0x006C, r24
			digits[2] = digits[3] = 0;
    1dbc:	10 92 6e 00 	sts	0x006E, r1
    1dc0:	80 91 6e 00 	lds	r24, 0x006E
    1dc4:	80 93 6d 00 	sts	0x006D, r24
    1dc8:	11 c0       	rjmp	.+34     	; 0x1dec <inc_clock+0xcc>
		}
	}
	else if(digits[3] == 9){
    1dca:	80 91 6e 00 	lds	r24, 0x006E
    1dce:	89 30       	cpi	r24, 0x09	; 9
    1dd0:	41 f4       	brne	.+16     	; 0x1de2 <inc_clock+0xc2>
		digits[2]++;
    1dd2:	80 91 6d 00 	lds	r24, 0x006D
    1dd6:	8f 5f       	subi	r24, 0xFF	; 255
    1dd8:	80 93 6d 00 	sts	0x006D, r24
		digits[3] = 0;
    1ddc:	10 92 6e 00 	sts	0x006E, r1
    1de0:	05 c0       	rjmp	.+10     	; 0x1dec <inc_clock+0xcc>
	}
	else{
		digits[3]++;
    1de2:	80 91 6e 00 	lds	r24, 0x006E
    1de6:	8f 5f       	subi	r24, 0xFF	; 255
    1de8:	80 93 6e 00 	sts	0x006E, r24
	}
}
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <inc_hours>:

void inc_hours(){
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
	if(digits[0] == 2 && digits[1] == 3){
    1dfa:	80 91 6b 00 	lds	r24, 0x006B
    1dfe:	82 30       	cpi	r24, 0x02	; 2
    1e00:	59 f4       	brne	.+22     	; 0x1e18 <inc_hours+0x26>
    1e02:	80 91 6c 00 	lds	r24, 0x006C
    1e06:	83 30       	cpi	r24, 0x03	; 3
    1e08:	39 f4       	brne	.+14     	; 0x1e18 <inc_hours+0x26>
		digits[0] = digits[1] = 0;
    1e0a:	10 92 6c 00 	sts	0x006C, r1
    1e0e:	80 91 6c 00 	lds	r24, 0x006C
    1e12:	80 93 6b 00 	sts	0x006B, r24
    1e16:	11 c0       	rjmp	.+34     	; 0x1e3a <inc_hours+0x48>
	}
	else if(digits[1] == 9){
    1e18:	80 91 6c 00 	lds	r24, 0x006C
    1e1c:	89 30       	cpi	r24, 0x09	; 9
    1e1e:	41 f4       	brne	.+16     	; 0x1e30 <inc_hours+0x3e>
		digits[0]++;
    1e20:	80 91 6b 00 	lds	r24, 0x006B
    1e24:	8f 5f       	subi	r24, 0xFF	; 255
    1e26:	80 93 6b 00 	sts	0x006B, r24
		digits[1] = 0;
    1e2a:	10 92 6c 00 	sts	0x006C, r1
    1e2e:	05 c0       	rjmp	.+10     	; 0x1e3a <inc_hours+0x48>
	}
	else{
		digits[1]++;
    1e30:	80 91 6c 00 	lds	r24, 0x006C
    1e34:	8f 5f       	subi	r24, 0xFF	; 255
    1e36:	80 93 6c 00 	sts	0x006C, r24
	}
}
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	08 95       	ret

00001e40 <inc_selected>:

void inc_selected(uint8 val){
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	0f 92       	push	r0
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
    1e4a:	89 83       	std	Y+1, r24	; 0x01
	init_7seg();
    1e4c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <init_7seg>
	if(val == 2){
    1e50:	89 81       	ldd	r24, Y+1	; 0x01
    1e52:	82 30       	cpi	r24, 0x02	; 2
    1e54:	19 f4       	brne	.+6      	; 0x1e5c <inc_selected+0x1c>
		inc_mins();
    1e56:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <inc_mins>
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <inc_selected+0x20>
	}
	else{
		inc_hours();
    1e5c:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <inc_hours>
	}
}
    1e60:	0f 90       	pop	r0
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <Digits_callback>:

void Digits_callback(void (*ptr)(void)){
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	00 d0       	rcall	.+0      	; 0x1e6e <Digits_callback+0x6>
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	9a 83       	std	Y+2, r25	; 0x02
    1e74:	89 83       	std	Y+1, r24	; 0x01
	Plincking_delay = ptr;
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7a:	90 93 7e 00 	sts	0x007E, r25
    1e7e:	80 93 7d 00 	sts	0x007D, r24
}
    1e82:	0f 90       	pop	r0
    1e84:	0f 90       	pop	r0
    1e86:	cf 91       	pop	r28
    1e88:	df 91       	pop	r29
    1e8a:	08 95       	ret

00001e8c <init_Buttons>:
static void (*init_7seg)(void) = NULL;
extern uint8 blincking;
extern uint8 delay_flag;
extern uint8 first;

void init_Buttons(){
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
	SETPINDIrection(BUTTONS_COL_PORT, BUTTON0_PIN, PIN_INPUT);
    1e94:	84 e0       	ldi	r24, 0x04	; 4
    1e96:	67 e0       	ldi	r22, 0x07	; 7
    1e98:	40 e0       	ldi	r20, 0x00	; 0
    1e9a:	0e 94 21 07 	call	0xe42	; 0xe42 <SETPINDIrection>
	SETPINDIrection(BUTTONS_COL_PORT, BUTTON1_PIN, PIN_INPUT);
    1e9e:	84 e0       	ldi	r24, 0x04	; 4
    1ea0:	66 e0       	ldi	r22, 0x06	; 6
    1ea2:	40 e0       	ldi	r20, 0x00	; 0
    1ea4:	0e 94 21 07 	call	0xe42	; 0xe42 <SETPINDIrection>

	SETPINDIrection(BUTTONS_ROW_PORT, ROW_BIN, PIN_OUTPUT);
    1ea8:	83 e0       	ldi	r24, 0x03	; 3
    1eaa:	65 e0       	ldi	r22, 0x05	; 5
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	0e 94 21 07 	call	0xe42	; 0xe42 <SETPINDIrection>
}
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <Buttons_logic>:

void Buttons_logic(){
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <Buttons_logic+0x6>
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <Buttons_logic+0x8>
    1ec0:	cd b7       	in	r28, 0x3d	; 61
    1ec2:	de b7       	in	r29, 0x3e	; 62
	uint8 pushed1 = 1, pushed2 = 1, push1 = 0, push2 = 0;
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	8b 83       	std	Y+3, r24	; 0x03
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	8c 83       	std	Y+4, r24	; 0x04
    1ecc:	1a 82       	std	Y+2, r1	; 0x02
    1ece:	19 82       	std	Y+1, r1	; 0x01
	init_7seg();
    1ed0:	e0 91 81 00 	lds	r30, 0x0081
    1ed4:	f0 91 82 00 	lds	r31, 0x0082
    1ed8:	09 95       	icall
	getpinvalue(BUTTONS_COL_PORT, BUTTON0_PIN, &pushed1);
    1eda:	9e 01       	movw	r18, r28
    1edc:	2d 5f       	subi	r18, 0xFD	; 253
    1ede:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee0:	84 e0       	ldi	r24, 0x04	; 4
    1ee2:	67 e0       	ldi	r22, 0x07	; 7
    1ee4:	a9 01       	movw	r20, r18
    1ee6:	0e 94 77 09 	call	0x12ee	; 0x12ee <getpinvalue>
    1eea:	0a c0       	rjmp	.+20     	; 0x1f00 <Buttons_logic+0x48>
	while(!pushed1){
		push1 = 1;
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	8a 83       	std	Y+2, r24	; 0x02
		getpinvalue(BUTTONS_COL_PORT, BUTTON0_PIN, &pushed1);
    1ef0:	9e 01       	movw	r18, r28
    1ef2:	2d 5f       	subi	r18, 0xFD	; 253
    1ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef6:	84 e0       	ldi	r24, 0x04	; 4
    1ef8:	67 e0       	ldi	r22, 0x07	; 7
    1efa:	a9 01       	movw	r20, r18
    1efc:	0e 94 77 09 	call	0x12ee	; 0x12ee <getpinvalue>

void Buttons_logic(){
	uint8 pushed1 = 1, pushed2 = 1, push1 = 0, push2 = 0;
	init_7seg();
	getpinvalue(BUTTONS_COL_PORT, BUTTON0_PIN, &pushed1);
	while(!pushed1){
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	88 23       	and	r24, r24
    1f04:	99 f3       	breq	.-26     	; 0x1eec <Buttons_logic+0x34>
		push1 = 1;
		getpinvalue(BUTTONS_COL_PORT, BUTTON0_PIN, &pushed1);
	}
	getpinvalue(BUTTONS_COL_PORT, BUTTON1_PIN, &pushed2);
    1f06:	9e 01       	movw	r18, r28
    1f08:	2c 5f       	subi	r18, 0xFC	; 252
    1f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0c:	84 e0       	ldi	r24, 0x04	; 4
    1f0e:	66 e0       	ldi	r22, 0x06	; 6
    1f10:	a9 01       	movw	r20, r18
    1f12:	0e 94 77 09 	call	0x12ee	; 0x12ee <getpinvalue>
    1f16:	0a c0       	rjmp	.+20     	; 0x1f2c <Buttons_logic+0x74>
	while(!pushed2){
		push2 = 1;
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	89 83       	std	Y+1, r24	; 0x01
		getpinvalue(BUTTONS_COL_PORT, BUTTON1_PIN, &pushed2);
    1f1c:	9e 01       	movw	r18, r28
    1f1e:	2c 5f       	subi	r18, 0xFC	; 252
    1f20:	3f 4f       	sbci	r19, 0xFF	; 255
    1f22:	84 e0       	ldi	r24, 0x04	; 4
    1f24:	66 e0       	ldi	r22, 0x06	; 6
    1f26:	a9 01       	movw	r20, r18
    1f28:	0e 94 77 09 	call	0x12ee	; 0x12ee <getpinvalue>
	while(!pushed1){
		push1 = 1;
		getpinvalue(BUTTONS_COL_PORT, BUTTON0_PIN, &pushed1);
	}
	getpinvalue(BUTTONS_COL_PORT, BUTTON1_PIN, &pushed2);
	while(!pushed2){
    1f2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2e:	88 23       	and	r24, r24
    1f30:	99 f3       	breq	.-26     	; 0x1f18 <Buttons_logic+0x60>
		push2 = 1;
		getpinvalue(BUTTONS_COL_PORT, BUTTON1_PIN, &pushed2);

	}
	if(push1){
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	88 23       	and	r24, r24
    1f36:	91 f0       	breq	.+36     	; 0x1f5c <Buttons_logic+0xa4>
		if(blincking == 2){
    1f38:	80 91 83 00 	lds	r24, 0x0083
    1f3c:	82 30       	cpi	r24, 0x02	; 2
    1f3e:	19 f4       	brne	.+6      	; 0x1f46 <Buttons_logic+0x8e>
			blincking = 0;
    1f40:	10 92 83 00 	sts	0x0083, r1
    1f44:	05 c0       	rjmp	.+10     	; 0x1f50 <Buttons_logic+0x98>
		}
		else{
			blincking++;
    1f46:	80 91 83 00 	lds	r24, 0x0083
    1f4a:	8f 5f       	subi	r24, 0xFF	; 255
    1f4c:	80 93 83 00 	sts	0x0083, r24
		}
		delay_flag = 1;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	80 93 6f 00 	sts	0x006F, r24
		first = 1;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	80 93 70 00 	sts	0x0070, r24
	}


	if(push2){
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	88 23       	and	r24, r24
    1f60:	89 f0       	breq	.+34     	; 0x1f84 <Buttons_logic+0xcc>
		if(blincking > 0){
    1f62:	80 91 83 00 	lds	r24, 0x0083
    1f66:	88 23       	and	r24, r24
    1f68:	39 f0       	breq	.+14     	; 0x1f78 <Buttons_logic+0xc0>
			inc(blincking);
    1f6a:	e0 91 7f 00 	lds	r30, 0x007F
    1f6e:	f0 91 80 00 	lds	r31, 0x0080
    1f72:	80 91 83 00 	lds	r24, 0x0083
    1f76:	09 95       	icall
		}
		delay_flag = 1;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	80 93 6f 00 	sts	0x006F, r24
		first = 1;
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	80 93 70 00 	sts	0x0070, r24
	}
}
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <BUTTON_CallBack>:

void BUTTON_CallBack(void (*ptr)(uint8), void (*ptr1)(void))
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <BUTTON_CallBack+0x6>
    1f98:	00 d0       	rcall	.+0      	; 0x1f9a <BUTTON_CallBack+0x8>
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	9a 83       	std	Y+2, r25	; 0x02
    1fa0:	89 83       	std	Y+1, r24	; 0x01
    1fa2:	7c 83       	std	Y+4, r23	; 0x04
    1fa4:	6b 83       	std	Y+3, r22	; 0x03
	inc = ptr;
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1faa:	90 93 80 00 	sts	0x0080, r25
    1fae:	80 93 7f 00 	sts	0x007F, r24
	init_7seg = ptr1;
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb6:	90 93 82 00 	sts	0x0082, r25
    1fba:	80 93 81 00 	sts	0x0081, r24
}
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	cf 91       	pop	r28
    1fc8:	df 91       	pop	r29
    1fca:	08 95       	ret

00001fcc <main>:
// blincking = 0 - > normal clock mode
// blincking = 1 - > plinking the hours
// blincking = 2 - > blincking minutes
uint8 blincking = 0;

int main(){
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
	INIT();
    1fd4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <INIT>
	TMR_Init();
    1fd8:	0e 94 a3 05 	call	0xb46	; 0xb46 <TMR_Init>
	init_7seg();
    1fdc:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <init_7seg>
	init_Buttons();
    1fe0:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <init_Buttons>
	GIE_voidEnable();
    1fe4:	0e 94 f2 06 	call	0xde4	; 0xde4 <GIE_voidEnable>
	Digits_callback(&Plincking_delay);
    1fe8:	89 ec       	ldi	r24, 0xC9	; 201
    1fea:	96 e0       	ldi	r25, 0x06	; 6
    1fec:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <Digits_callback>
	BUTTON_CallBack(&inc_selected, &init_7seg);
    1ff0:	29 e5       	ldi	r18, 0x59	; 89
    1ff2:	3b e0       	ldi	r19, 0x0B	; 11
    1ff4:	80 e2       	ldi	r24, 0x20	; 32
    1ff6:	9f e0       	ldi	r25, 0x0F	; 15
    1ff8:	b9 01       	movw	r22, r18
    1ffa:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <BUTTON_CallBack>
	Timer_callback(&inc_clock);
    1ffe:	80 e9       	ldi	r24, 0x90	; 144
    2000:	9e e0       	ldi	r25, 0x0E	; 14
    2002:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <Timer_callback>

	while(1){
		Start_clock();
    2006:	0e 94 a7 06 	call	0xd4e	; 0xd4e <Start_clock>
		Display_clock();
    200a:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <Display_clock>
		Buttons_logic();
    200e:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <Buttons_logic>
    2012:	f9 cf       	rjmp	.-14     	; 0x2006 <main+0x3a>

00002014 <__udivmodhi4>:
    2014:	aa 1b       	sub	r26, r26
    2016:	bb 1b       	sub	r27, r27
    2018:	51 e1       	ldi	r21, 0x11	; 17
    201a:	07 c0       	rjmp	.+14     	; 0x202a <__udivmodhi4_ep>

0000201c <__udivmodhi4_loop>:
    201c:	aa 1f       	adc	r26, r26
    201e:	bb 1f       	adc	r27, r27
    2020:	a6 17       	cp	r26, r22
    2022:	b7 07       	cpc	r27, r23
    2024:	10 f0       	brcs	.+4      	; 0x202a <__udivmodhi4_ep>
    2026:	a6 1b       	sub	r26, r22
    2028:	b7 0b       	sbc	r27, r23

0000202a <__udivmodhi4_ep>:
    202a:	88 1f       	adc	r24, r24
    202c:	99 1f       	adc	r25, r25
    202e:	5a 95       	dec	r21
    2030:	a9 f7       	brne	.-22     	; 0x201c <__udivmodhi4_loop>
    2032:	80 95       	com	r24
    2034:	90 95       	com	r25
    2036:	bc 01       	movw	r22, r24
    2038:	cd 01       	movw	r24, r26
    203a:	08 95       	ret

0000203c <__prologue_saves__>:
    203c:	2f 92       	push	r2
    203e:	3f 92       	push	r3
    2040:	4f 92       	push	r4
    2042:	5f 92       	push	r5
    2044:	6f 92       	push	r6
    2046:	7f 92       	push	r7
    2048:	8f 92       	push	r8
    204a:	9f 92       	push	r9
    204c:	af 92       	push	r10
    204e:	bf 92       	push	r11
    2050:	cf 92       	push	r12
    2052:	df 92       	push	r13
    2054:	ef 92       	push	r14
    2056:	ff 92       	push	r15
    2058:	0f 93       	push	r16
    205a:	1f 93       	push	r17
    205c:	cf 93       	push	r28
    205e:	df 93       	push	r29
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	ca 1b       	sub	r28, r26
    2066:	db 0b       	sbc	r29, r27
    2068:	0f b6       	in	r0, 0x3f	; 63
    206a:	f8 94       	cli
    206c:	de bf       	out	0x3e, r29	; 62
    206e:	0f be       	out	0x3f, r0	; 63
    2070:	cd bf       	out	0x3d, r28	; 61
    2072:	09 94       	ijmp

00002074 <__epilogue_restores__>:
    2074:	2a 88       	ldd	r2, Y+18	; 0x12
    2076:	39 88       	ldd	r3, Y+17	; 0x11
    2078:	48 88       	ldd	r4, Y+16	; 0x10
    207a:	5f 84       	ldd	r5, Y+15	; 0x0f
    207c:	6e 84       	ldd	r6, Y+14	; 0x0e
    207e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2080:	8c 84       	ldd	r8, Y+12	; 0x0c
    2082:	9b 84       	ldd	r9, Y+11	; 0x0b
    2084:	aa 84       	ldd	r10, Y+10	; 0x0a
    2086:	b9 84       	ldd	r11, Y+9	; 0x09
    2088:	c8 84       	ldd	r12, Y+8	; 0x08
    208a:	df 80       	ldd	r13, Y+7	; 0x07
    208c:	ee 80       	ldd	r14, Y+6	; 0x06
    208e:	fd 80       	ldd	r15, Y+5	; 0x05
    2090:	0c 81       	ldd	r16, Y+4	; 0x04
    2092:	1b 81       	ldd	r17, Y+3	; 0x03
    2094:	aa 81       	ldd	r26, Y+2	; 0x02
    2096:	b9 81       	ldd	r27, Y+1	; 0x01
    2098:	ce 0f       	add	r28, r30
    209a:	d1 1d       	adc	r29, r1
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	ed 01       	movw	r28, r26
    20a8:	08 95       	ret

000020aa <_exit>:
    20aa:	f8 94       	cli

000020ac <__stop_program>:
    20ac:	ff cf       	rjmp	.-2      	; 0x20ac <__stop_program>
